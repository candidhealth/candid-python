# This file was auto-generated by Fern from our API Definition.

import typing
from .....core.client_wrapper import SyncClientWrapper
from ....commons.types.patient_external_id import PatientExternalId
import datetime as dt
from ....commons.types.street_address_short_zip import StreetAddressShortZip
from .....core.request_options import RequestOptions
from .types.superbill_response import SuperbillResponse
from json.decoder import JSONDecodeError
from .....core.api_error import ApiError
from .....core.pydantic_utilities import parse_obj_as
from ....commons.errors.unprocessable_entity_error import UnprocessableEntityError
from ....commons.types.unprocessable_entity_error_message import UnprocessableEntityErrorMessage
from .....core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class V1Client:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_superbill(
        self,
        *,
        patient_external_id: PatientExternalId,
        date_range_min: dt.date,
        date_range_max: dt.date,
        pay_to_address: typing.Optional[StreetAddressShortZip] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SuperbillResponse:
        """
        Parameters
        ----------
        patient_external_id : PatientExternalId
            Empty string not allowed

        date_range_min : dt.date
            Minimum (inclusive) date selected for the superbill

        date_range_max : dt.date
            Maximum (inclusive) date selected for the superbill

        pay_to_address : typing.Optional[StreetAddressShortZip]
            Address that will be displayed on the superbill as the 'Pay to' Address. If not provided this value will be set from available encounter data.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SuperbillResponse

        Examples
        --------
        import datetime

        from candid import CandidApiClient

        client = CandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.superbills.v_1.create_superbill(
            patient_external_id="patient_external_id",
            date_range_min=datetime.date.fromisoformat(
                "2023-01-15",
            ),
            date_range_max=datetime.date.fromisoformat(
                "2023-01-15",
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/superbill/v1",
            base_url=self._client_wrapper.get_environment().candid_api,
            method="POST",
            json={
                "patient_external_id": patient_external_id,
                "date_range_min": date_range_min,
                "date_range_max": date_range_max,
                "pay_to_address": pay_to_address,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                SuperbillResponse,
                parse_obj_as(
                    type_=SuperbillResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
        if "errorName" in _response_json:
            if _response_json["errorName"] == "UnprocessableEntityError":
                raise UnprocessableEntityError(
                    typing.cast(
                        UnprocessableEntityErrorMessage,
                        parse_obj_as(
                            type_=UnprocessableEntityErrorMessage,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncV1Client:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_superbill(
        self,
        *,
        patient_external_id: PatientExternalId,
        date_range_min: dt.date,
        date_range_max: dt.date,
        pay_to_address: typing.Optional[StreetAddressShortZip] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SuperbillResponse:
        """
        Parameters
        ----------
        patient_external_id : PatientExternalId
            Empty string not allowed

        date_range_min : dt.date
            Minimum (inclusive) date selected for the superbill

        date_range_max : dt.date
            Maximum (inclusive) date selected for the superbill

        pay_to_address : typing.Optional[StreetAddressShortZip]
            Address that will be displayed on the superbill as the 'Pay to' Address. If not provided this value will be set from available encounter data.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SuperbillResponse

        Examples
        --------
        import asyncio
        import datetime

        from candid import AsyncCandidApiClient

        client = AsyncCandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.superbills.v_1.create_superbill(
                patient_external_id="patient_external_id",
                date_range_min=datetime.date.fromisoformat(
                    "2023-01-15",
                ),
                date_range_max=datetime.date.fromisoformat(
                    "2023-01-15",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/superbill/v1",
            base_url=self._client_wrapper.get_environment().candid_api,
            method="POST",
            json={
                "patient_external_id": patient_external_id,
                "date_range_min": date_range_min,
                "date_range_max": date_range_max,
                "pay_to_address": pay_to_address,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                SuperbillResponse,
                parse_obj_as(
                    type_=SuperbillResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
        if "errorName" in _response_json:
            if _response_json["errorName"] == "UnprocessableEntityError":
                raise UnprocessableEntityError(
                    typing.cast(
                        UnprocessableEntityErrorMessage,
                        parse_obj_as(
                            type_=UnprocessableEntityErrorMessage,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)
