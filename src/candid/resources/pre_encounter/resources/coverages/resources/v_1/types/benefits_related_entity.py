# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ........core.datetime_utils import serialize_datetime
from ........core.pydantic_utilities import deep_union_pydantic_dicts
from .related_entity_contact import RelatedEntityContact


class BenefitsRelatedEntity(pydantic.BaseModel):
    entity_identifier: typing.Optional[str] = pydantic.Field(alias="entityIdentifier", default=None)
    entity_type: typing.Optional[str] = pydantic.Field(alias="entityType", default=None)
    entity_name: typing.Optional[str] = pydantic.Field(alias="entityName", default=None)
    contact_information: typing.Optional[typing.List[RelatedEntityContact]] = pydantic.Field(
        alias="contactInformation", default=None
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
