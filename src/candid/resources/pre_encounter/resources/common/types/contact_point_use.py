# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class ContactPointUse(str, enum.Enum):
    HOME = "HOME"
    WORK = "WORK"
    TEMP = "TEMP"
    OLD = "OLD"
    MOBILE = "MOBILE"
    _UNKNOWN = "__CONTACTPOINTUSE_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "ContactPointUse":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        home: typing.Callable[[], T_Result],
        work: typing.Callable[[], T_Result],
        temp: typing.Callable[[], T_Result],
        old: typing.Callable[[], T_Result],
        mobile: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is ContactPointUse.HOME:
            return home()
        if self is ContactPointUse.WORK:
            return work()
        if self is ContactPointUse.TEMP:
            return temp()
        if self is ContactPointUse.OLD:
            return old()
        if self is ContactPointUse.MOBILE:
            return mobile()
        return _unknown_member(self._value_)
