# This file was auto-generated by Fern from our API Definition.

import typing
from .......core.client_wrapper import SyncClientWrapper
from ....common.types.note_id import NoteId
from .......core.request_options import RequestOptions
from .types.note import Note
from .......core.jsonable_encoder import jsonable_encoder
from json.decoder import JSONDecodeError
from .......core.api_error import ApiError
from .......core.pydantic_utilities import parse_obj_as
from .types.mutable_note import MutableNote
from .......core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class V1Client:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get(self, id: NoteId, *, request_options: typing.Optional[RequestOptions] = None) -> Note:
        """
        Gets a note by NoteId.

        Parameters
        ----------
        id : NoteId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Note

        Examples
        --------
        from candid import CandidApiClient

        client = CandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.pre_encounter.notes.v_1.get(
            id="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"notes/v1/{jsonable_encoder(id)}",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                Note,
                parse_obj_as(
                    type_=Note,  # type: ignore
                    object_=_response_json,
                ),
            )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(self, *, request: MutableNote, request_options: typing.Optional[RequestOptions] = None) -> Note:
        """
        Adds a new note.

        Parameters
        ----------
        request : MutableNote

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Note

        Examples
        --------
        from candid import CandidApiClient
        from candid.resources.pre_encounter.resources.notes.resources.v_1 import (
            MutableNote,
        )

        client = CandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.pre_encounter.notes.v_1.create(
            request=MutableNote(
                value="string",
                author_email="string",
                author_name="string",
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "notes/v1",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                Note,
                parse_obj_as(
                    type_=Note,  # type: ignore
                    object_=_response_json,
                ),
            )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self, id: NoteId, version: str, *, request: MutableNote, request_options: typing.Optional[RequestOptions] = None
    ) -> Note:
        """
        Updates a note. The path must contain the most recent version to prevent races.

        Parameters
        ----------
        id : NoteId

        version : str

        request : MutableNote

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Note

        Examples
        --------
        from candid import CandidApiClient
        from candid.resources.pre_encounter.resources.notes.resources.v_1 import (
            MutableNote,
        )

        client = CandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.pre_encounter.notes.v_1.update(
            id="string",
            version="string",
            request=MutableNote(
                value="string",
                author_email="string",
                author_name="string",
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"notes/v1/{jsonable_encoder(id)}/{jsonable_encoder(version)}",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="PUT",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                Note,
                parse_obj_as(
                    type_=Note,  # type: ignore
                    object_=_response_json,
                ),
            )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def deactivate(self, id: NoteId, version: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Sets a note as deactivated. The path must contain the most recent version to prevent races.

        Parameters
        ----------
        id : NoteId

        version : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from candid import CandidApiClient

        client = CandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.pre_encounter.notes.v_1.deactivate(
            id="string",
            version="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"notes/v1/{jsonable_encoder(id)}/{jsonable_encoder(version)}",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="DELETE",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncV1Client:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get(self, id: NoteId, *, request_options: typing.Optional[RequestOptions] = None) -> Note:
        """
        Gets a note by NoteId.

        Parameters
        ----------
        id : NoteId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Note

        Examples
        --------
        import asyncio

        from candid import AsyncCandidApiClient

        client = AsyncCandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.pre_encounter.notes.v_1.get(
                id="string",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"notes/v1/{jsonable_encoder(id)}",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                Note,
                parse_obj_as(
                    type_=Note,  # type: ignore
                    object_=_response_json,
                ),
            )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(self, *, request: MutableNote, request_options: typing.Optional[RequestOptions] = None) -> Note:
        """
        Adds a new note.

        Parameters
        ----------
        request : MutableNote

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Note

        Examples
        --------
        import asyncio

        from candid import AsyncCandidApiClient
        from candid.resources.pre_encounter.resources.notes.resources.v_1 import (
            MutableNote,
        )

        client = AsyncCandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.pre_encounter.notes.v_1.create(
                request=MutableNote(
                    value="string",
                    author_email="string",
                    author_name="string",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "notes/v1",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                Note,
                parse_obj_as(
                    type_=Note,  # type: ignore
                    object_=_response_json,
                ),
            )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self, id: NoteId, version: str, *, request: MutableNote, request_options: typing.Optional[RequestOptions] = None
    ) -> Note:
        """
        Updates a note. The path must contain the most recent version to prevent races.

        Parameters
        ----------
        id : NoteId

        version : str

        request : MutableNote

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Note

        Examples
        --------
        import asyncio

        from candid import AsyncCandidApiClient
        from candid.resources.pre_encounter.resources.notes.resources.v_1 import (
            MutableNote,
        )

        client = AsyncCandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.pre_encounter.notes.v_1.update(
                id="string",
                version="string",
                request=MutableNote(
                    value="string",
                    author_email="string",
                    author_name="string",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"notes/v1/{jsonable_encoder(id)}/{jsonable_encoder(version)}",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="PUT",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                Note,
                parse_obj_as(
                    type_=Note,  # type: ignore
                    object_=_response_json,
                ),
            )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def deactivate(
        self, id: NoteId, version: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Sets a note as deactivated. The path must contain the most recent version to prevent races.

        Parameters
        ----------
        id : NoteId

        version : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from candid import AsyncCandidApiClient

        client = AsyncCandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.pre_encounter.notes.v_1.deactivate(
                id="string",
                version="string",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"notes/v1/{jsonable_encoder(id)}/{jsonable_encoder(version)}",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="DELETE",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
