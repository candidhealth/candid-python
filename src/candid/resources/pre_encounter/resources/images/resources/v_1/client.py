# This file was auto-generated by Fern from our API Definition.

import typing
from .......core.client_wrapper import SyncClientWrapper
from .types.mutable_image import MutableImage
from .......core.request_options import RequestOptions
from .types.image import Image
from json.decoder import JSONDecodeError
from .......core.api_error import ApiError
from .......core.pydantic_utilities import parse_obj_as
from ....common.errors.version_conflict_error import VersionConflictError
from ....common.types.version_conflict_error_body import VersionConflictErrorBody
from .types.image_id import ImageId
from .......core.jsonable_encoder import jsonable_encoder
from ....common.errors.not_found_error import NotFoundError
from ....common.types.error_base_4_xx import ErrorBase4Xx
from .......core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class V1Client:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(self, *, request: MutableImage, request_options: typing.Optional[RequestOptions] = None) -> Image:
        """
        Adds an image. VersionConflictError is returned if a front or back of this coverage already exists.

        Parameters
        ----------
        request : MutableImage

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Image

        Examples
        --------
        import uuid

        from candid import CandidApiClient
        from candid.resources.pre_encounter.resources.images.resources.v_1 import (
            CoverageAssociation,
            CoverageImageSide,
            ImageStatus,
            MutableImage,
            PatientAssociation,
        )

        client = CandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.pre_encounter.images.v_1.create(
            request=MutableImage(
                file_name="string",
                display_name="string",
                file_type="string",
                status=ImageStatus.PENDING,
                coverage=CoverageAssociation(
                    id=uuid.UUID(
                        "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                    ),
                    side=CoverageImageSide.FRONT,
                ),
                patient=PatientAssociation(
                    id="string",
                    notes="string",
                ),
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "images/v1",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                Image,
                parse_obj_as(
                    type_=Image,  # type: ignore
                    object_=_response_json,
                ),
            )
        if "errorName" in _response_json:
            if _response_json["errorName"] == "VersionConflictError":
                raise VersionConflictError(
                    typing.cast(
                        VersionConflictErrorBody,
                        parse_obj_as(
                            type_=VersionConflictErrorBody,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, id: ImageId, *, request_options: typing.Optional[RequestOptions] = None) -> Image:
        """
        Gets an image by imageId.

        Parameters
        ----------
        id : ImageId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Image

        Examples
        --------
        from candid import CandidApiClient

        client = CandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.pre_encounter.images.v_1.get(
            id="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"images/v1/{jsonable_encoder(id)}",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                Image,
                parse_obj_as(
                    type_=Image,  # type: ignore
                    object_=_response_json,
                ),
            )
        if "errorName" in _response_json:
            if _response_json["errorName"] == "NotFoundError":
                raise NotFoundError(
                    typing.cast(
                        ErrorBase4Xx,
                        parse_obj_as(
                            type_=ErrorBase4Xx,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        id: ImageId,
        version: str,
        *,
        request: MutableImage,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Image:
        """
        Updates an Image. The path must contain the most recent version to prevent races.

        Parameters
        ----------
        id : ImageId

        version : str

        request : MutableImage

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Image

        Examples
        --------
        import uuid

        from candid import CandidApiClient
        from candid.resources.pre_encounter.resources.images.resources.v_1 import (
            CoverageAssociation,
            CoverageImageSide,
            ImageStatus,
            MutableImage,
            PatientAssociation,
        )

        client = CandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.pre_encounter.images.v_1.update(
            id="string",
            version="string",
            request=MutableImage(
                file_name="string",
                display_name="string",
                file_type="string",
                status=ImageStatus.PENDING,
                coverage=CoverageAssociation(
                    id=uuid.UUID(
                        "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                    ),
                    side=CoverageImageSide.FRONT,
                ),
                patient=PatientAssociation(
                    id="string",
                    notes="string",
                ),
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"images/v1/{jsonable_encoder(id)}/{jsonable_encoder(version)}",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="PUT",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                Image,
                parse_obj_as(
                    type_=Image,  # type: ignore
                    object_=_response_json,
                ),
            )
        if "errorName" in _response_json:
            if _response_json["errorName"] == "NotFoundError":
                raise NotFoundError(
                    typing.cast(
                        ErrorBase4Xx,
                        parse_obj_as(
                            type_=ErrorBase4Xx,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
            if _response_json["errorName"] == "VersionConflictError":
                raise VersionConflictError(
                    typing.cast(
                        VersionConflictErrorBody,
                        parse_obj_as(
                            type_=VersionConflictErrorBody,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def deactivate(self, id: ImageId, version: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Sets an Image as deactivated. The path must contain the most recent version to prevent races.

        Parameters
        ----------
        id : ImageId

        version : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from candid import CandidApiClient

        client = CandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.pre_encounter.images.v_1.deactivate(
            id="string",
            version="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"images/v1/{jsonable_encoder(id)}/{jsonable_encoder(version)}",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="DELETE",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if "errorName" in _response_json:
            if _response_json["errorName"] == "NotFoundError":
                raise NotFoundError(
                    typing.cast(
                        ErrorBase4Xx,
                        parse_obj_as(
                            type_=ErrorBase4Xx,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
            if _response_json["errorName"] == "VersionConflictError":
                raise VersionConflictError(
                    typing.cast(
                        VersionConflictErrorBody,
                        parse_obj_as(
                            type_=VersionConflictErrorBody,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_multi(
        self,
        *,
        patient_id: typing.Optional[str] = None,
        coverage_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Image]:
        """
        Searches for images that match the query parameters.

        Parameters
        ----------
        patient_id : typing.Optional[str]

        coverage_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Image]

        Examples
        --------
        from candid import CandidApiClient

        client = CandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.pre_encounter.images.v_1.get_multi(
            patient_id="string",
            coverage_id="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "images/v1",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="GET",
            params={
                "patient_id": patient_id,
                "coverage_id": coverage_id,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                typing.List[Image],
                parse_obj_as(
                    type_=typing.List[Image],  # type: ignore
                    object_=_response_json,
                ),
            )
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncV1Client:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(self, *, request: MutableImage, request_options: typing.Optional[RequestOptions] = None) -> Image:
        """
        Adds an image. VersionConflictError is returned if a front or back of this coverage already exists.

        Parameters
        ----------
        request : MutableImage

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Image

        Examples
        --------
        import asyncio
        import uuid

        from candid import AsyncCandidApiClient
        from candid.resources.pre_encounter.resources.images.resources.v_1 import (
            CoverageAssociation,
            CoverageImageSide,
            ImageStatus,
            MutableImage,
            PatientAssociation,
        )

        client = AsyncCandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.pre_encounter.images.v_1.create(
                request=MutableImage(
                    file_name="string",
                    display_name="string",
                    file_type="string",
                    status=ImageStatus.PENDING,
                    coverage=CoverageAssociation(
                        id=uuid.UUID(
                            "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                        ),
                        side=CoverageImageSide.FRONT,
                    ),
                    patient=PatientAssociation(
                        id="string",
                        notes="string",
                    ),
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "images/v1",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                Image,
                parse_obj_as(
                    type_=Image,  # type: ignore
                    object_=_response_json,
                ),
            )
        if "errorName" in _response_json:
            if _response_json["errorName"] == "VersionConflictError":
                raise VersionConflictError(
                    typing.cast(
                        VersionConflictErrorBody,
                        parse_obj_as(
                            type_=VersionConflictErrorBody,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, id: ImageId, *, request_options: typing.Optional[RequestOptions] = None) -> Image:
        """
        Gets an image by imageId.

        Parameters
        ----------
        id : ImageId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Image

        Examples
        --------
        import asyncio

        from candid import AsyncCandidApiClient

        client = AsyncCandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.pre_encounter.images.v_1.get(
                id="string",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"images/v1/{jsonable_encoder(id)}",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                Image,
                parse_obj_as(
                    type_=Image,  # type: ignore
                    object_=_response_json,
                ),
            )
        if "errorName" in _response_json:
            if _response_json["errorName"] == "NotFoundError":
                raise NotFoundError(
                    typing.cast(
                        ErrorBase4Xx,
                        parse_obj_as(
                            type_=ErrorBase4Xx,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        id: ImageId,
        version: str,
        *,
        request: MutableImage,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Image:
        """
        Updates an Image. The path must contain the most recent version to prevent races.

        Parameters
        ----------
        id : ImageId

        version : str

        request : MutableImage

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Image

        Examples
        --------
        import asyncio
        import uuid

        from candid import AsyncCandidApiClient
        from candid.resources.pre_encounter.resources.images.resources.v_1 import (
            CoverageAssociation,
            CoverageImageSide,
            ImageStatus,
            MutableImage,
            PatientAssociation,
        )

        client = AsyncCandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.pre_encounter.images.v_1.update(
                id="string",
                version="string",
                request=MutableImage(
                    file_name="string",
                    display_name="string",
                    file_type="string",
                    status=ImageStatus.PENDING,
                    coverage=CoverageAssociation(
                        id=uuid.UUID(
                            "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                        ),
                        side=CoverageImageSide.FRONT,
                    ),
                    patient=PatientAssociation(
                        id="string",
                        notes="string",
                    ),
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"images/v1/{jsonable_encoder(id)}/{jsonable_encoder(version)}",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="PUT",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                Image,
                parse_obj_as(
                    type_=Image,  # type: ignore
                    object_=_response_json,
                ),
            )
        if "errorName" in _response_json:
            if _response_json["errorName"] == "NotFoundError":
                raise NotFoundError(
                    typing.cast(
                        ErrorBase4Xx,
                        parse_obj_as(
                            type_=ErrorBase4Xx,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
            if _response_json["errorName"] == "VersionConflictError":
                raise VersionConflictError(
                    typing.cast(
                        VersionConflictErrorBody,
                        parse_obj_as(
                            type_=VersionConflictErrorBody,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def deactivate(
        self, id: ImageId, version: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Sets an Image as deactivated. The path must contain the most recent version to prevent races.

        Parameters
        ----------
        id : ImageId

        version : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from candid import AsyncCandidApiClient

        client = AsyncCandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.pre_encounter.images.v_1.deactivate(
                id="string",
                version="string",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"images/v1/{jsonable_encoder(id)}/{jsonable_encoder(version)}",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="DELETE",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if "errorName" in _response_json:
            if _response_json["errorName"] == "NotFoundError":
                raise NotFoundError(
                    typing.cast(
                        ErrorBase4Xx,
                        parse_obj_as(
                            type_=ErrorBase4Xx,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
            if _response_json["errorName"] == "VersionConflictError":
                raise VersionConflictError(
                    typing.cast(
                        VersionConflictErrorBody,
                        parse_obj_as(
                            type_=VersionConflictErrorBody,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_multi(
        self,
        *,
        patient_id: typing.Optional[str] = None,
        coverage_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Image]:
        """
        Searches for images that match the query parameters.

        Parameters
        ----------
        patient_id : typing.Optional[str]

        coverage_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Image]

        Examples
        --------
        import asyncio

        from candid import AsyncCandidApiClient

        client = AsyncCandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.pre_encounter.images.v_1.get_multi(
                patient_id="string",
                coverage_id="string",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "images/v1",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="GET",
            params={
                "patient_id": patient_id,
                "coverage_id": coverage_id,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                typing.List[Image],
                parse_obj_as(
                    type_=typing.List[Image],  # type: ignore
                    object_=_response_json,
                ),
            )
        raise ApiError(status_code=_response.status_code, body=_response_json)
