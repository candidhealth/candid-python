# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ........core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .medicare_advantage_recommendation_payload import MedicareAdvantageRecommendationPayload


class EligibilityRecommendationPayload_MedicareAdvantage(UniversalBaseModel):
    type: typing.Literal["MEDICARE_ADVANTAGE"] = "MEDICARE_ADVANTAGE"
    payload: MedicareAdvantageRecommendationPayload

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class EligibilityRecommendationPayload_CoordinationOfBenefits(UniversalBaseModel):
    type: typing.Literal["COORDINATION_OF_BENEFITS"] = "COORDINATION_OF_BENEFITS"
    payload: typing.Optional[typing.Any] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


EligibilityRecommendationPayload = typing.Union[
    EligibilityRecommendationPayload_MedicareAdvantage, EligibilityRecommendationPayload_CoordinationOfBenefits
]
