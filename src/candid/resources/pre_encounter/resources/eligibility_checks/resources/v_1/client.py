# This file was auto-generated by Fern from our API Definition.

import typing
from .......core.client_wrapper import SyncClientWrapper
from .types.eligibility_request import EligibilityRequest
from .......core.request_options import RequestOptions
from .types.eligibility_response import EligibilityResponse
from json.decoder import JSONDecodeError
from .......core.api_error import ApiError
from .......core.pydantic_utilities import parse_obj_as
from .......core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class V1Client:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def post(
        self, *, request: EligibilityRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> EligibilityResponse:
        """
        Sends real-time eligibility checks to payers through Stedi.

        Parameters
        ----------
        request : EligibilityRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EligibilityResponse

        Examples
        --------
        import datetime

        from candid import CandidApiClient
        from candid.resources.pre_encounter.resources.coverages.resources.v_1 import (
            MemberInfo,
        )
        from candid.resources.pre_encounter.resources.eligibility_checks.resources.v_1 import (
            EligibilityRequest,
            Encounter,
            IndividualProvider,
        )

        client = CandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.pre_encounter.eligibility_checks.v_1.post(
            request=EligibilityRequest(
                payer_id="string",
                provider=IndividualProvider(
                    first_name="string",
                    last_name="string",
                    npi="string",
                ),
                subscriber=MemberInfo(
                    member_id="string",
                    first_name="string",
                    last_name="string",
                    date_of_birth=datetime.date.fromisoformat(
                        "2023-01-15",
                    ),
                ),
                dependent=MemberInfo(
                    member_id="string",
                    first_name="string",
                    last_name="string",
                    date_of_birth=datetime.date.fromisoformat(
                        "2023-01-15",
                    ),
                ),
                encounter=Encounter(
                    date_of_service=datetime.date.fromisoformat(
                        "2023-01-15",
                    ),
                    service_type_codes=["string"],
                ),
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "eligibility-checks/v1",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                EligibilityResponse,
                parse_obj_as(
                    type_=EligibilityResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncV1Client:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def post(
        self, *, request: EligibilityRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> EligibilityResponse:
        """
        Sends real-time eligibility checks to payers through Stedi.

        Parameters
        ----------
        request : EligibilityRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EligibilityResponse

        Examples
        --------
        import asyncio
        import datetime

        from candid import AsyncCandidApiClient
        from candid.resources.pre_encounter.resources.coverages.resources.v_1 import (
            MemberInfo,
        )
        from candid.resources.pre_encounter.resources.eligibility_checks.resources.v_1 import (
            EligibilityRequest,
            Encounter,
            IndividualProvider,
        )

        client = AsyncCandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.pre_encounter.eligibility_checks.v_1.post(
                request=EligibilityRequest(
                    payer_id="string",
                    provider=IndividualProvider(
                        first_name="string",
                        last_name="string",
                        npi="string",
                    ),
                    subscriber=MemberInfo(
                        member_id="string",
                        first_name="string",
                        last_name="string",
                        date_of_birth=datetime.date.fromisoformat(
                            "2023-01-15",
                        ),
                    ),
                    dependent=MemberInfo(
                        member_id="string",
                        first_name="string",
                        last_name="string",
                        date_of_birth=datetime.date.fromisoformat(
                            "2023-01-15",
                        ),
                    ),
                    encounter=Encounter(
                        date_of_service=datetime.date.fromisoformat(
                            "2023-01-15",
                        ),
                        service_type_codes=["string"],
                    ),
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "eligibility-checks/v1",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                EligibilityResponse,
                parse_obj_as(
                    type_=EligibilityResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
        raise ApiError(status_code=_response.status_code, body=_response_json)
