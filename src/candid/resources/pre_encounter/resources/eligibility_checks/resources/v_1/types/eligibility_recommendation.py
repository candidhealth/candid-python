# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ........core.pydantic_utilities import IS_PYDANTIC_V2
from .....common.types.base_model import BaseModel
from .eligibility_recommendation_patient_info import EligibilityRecommendationPatientInfo
from .eligibility_recommendation_payload import EligibilityRecommendationPayload


class EligibilityRecommendation(BaseModel):
    """
    An eligibility recommendation object that contains an EligibilityRecommendationType and a payload of data denoting the recommendation.
    """

    id: str = pydantic.Field()
    """
    The unique UUID identifier for an EligibilityRecommendation.
    """

    recommendation: EligibilityRecommendationPayload
    patient: EligibilityRecommendationPatientInfo

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
