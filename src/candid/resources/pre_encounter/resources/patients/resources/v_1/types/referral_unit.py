# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class ReferralUnit(str, enum.Enum):
    VISIT = "VISIT"
    UNIT = "UNIT"
    _UNKNOWN = "__REFERRALUNIT_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "ReferralUnit":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        visit: typing.Callable[[], T_Result],
        unit: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is ReferralUnit.VISIT:
            return visit()
        if self is ReferralUnit.UNIT:
            return unit()
        return _unknown_member(self._value_)
