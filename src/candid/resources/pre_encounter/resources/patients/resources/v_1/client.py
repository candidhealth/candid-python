# This file was auto-generated by Fern from our API Definition.

import typing
from .......core.client_wrapper import SyncClientWrapper
from .types.mutable_patient import MutablePatient
from .......core.request_options import RequestOptions
from .types.patient import Patient
from json.decoder import JSONDecodeError
from .......core.api_error import ApiError
from .......core.pydantic_utilities import parse_obj_as
from ....common.errors.version_conflict_error import VersionConflictError
from ....common.types.version_conflict_error_body import VersionConflictErrorBody
from .types.mutable_patient_with_mrn import MutablePatientWithMrn
from ....common.errors.bad_request_error import BadRequestError
from ....common.types.error_base_4_xx import ErrorBase4Xx
from ....common.types.page_token import PageToken
from .types.patient_sort_field import PatientSortField
from ....common.types.sort_direction import SortDirection
from .types.patient_page import PatientPage
from ....common.types.patient_id import PatientId
from .......core.jsonable_encoder import jsonable_encoder
from ....common.errors.not_found_error import NotFoundError
import datetime as dt
from .......core.datetime_utils import serialize_datetime
from .......core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class V1Client:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        request: MutablePatient,
        skip_duplicate_check: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Patient:
        """
        Adds a patient. VersionConflictError is returned when the patient's external ID is already in use.

        Parameters
        ----------
        request : MutablePatient

        skip_duplicate_check : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Patient

        Examples
        --------
        import datetime
        import uuid

        from candid import CandidApiClient
        from candid.resources.pre_encounter.resources.common import (
            AdditionalPayerInformation,
            Address,
            AddressUse,
            CanonicalNonInsurancePayerAssociation,
            ContactPoint,
            ContactPointUse,
            DisabilityStatus,
            Ethnicity,
            ExternalIdentifier,
            ExternalProvider,
            ExternalProviderType,
            Gender,
            HumanName,
            NameUse,
            Period,
            Race,
            Relationship,
            Sex,
            SexualOrientation,
        )
        from candid.resources.pre_encounter.resources.patients.resources.v_1 import (
            Authorization,
            AuthorizationUnit,
            Contact,
            DoNotInvoiceReason,
            ExternalProvenance,
            FilingOrder,
            Guarantor,
            MaritalStatus,
            MutablePatient,
            Referral,
        )

        client = CandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.pre_encounter.patients.v_1.create(
            skip_duplicate_check=True,
            request=MutablePatient(
                name=HumanName(
                    family="string",
                    given=["string"],
                    use=NameUse.USUAL,
                    period=Period(),
                ),
                other_names=[
                    HumanName(
                        family="string",
                        given=["string"],
                        use=NameUse.USUAL,
                        period=Period(),
                    )
                ],
                other_identifiers=[
                    ExternalIdentifier(
                        value="string",
                        system="string",
                    )
                ],
                gender=Gender.MAN,
                birth_date=datetime.date.fromisoformat(
                    "2023-01-15",
                ),
                social_security_number="string",
                biological_sex=Sex.FEMALE,
                sexual_orientation=SexualOrientation.HETEROSEXUAL,
                race=Race.AMERICAN_INDIAN_OR_ALASKA_NATIVE,
                ethnicity=Ethnicity.HISPANIC_OR_LATINO,
                disability_status=DisabilityStatus.DISABLED,
                marital_status=MaritalStatus.ANNULLED,
                deceased=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                multiple_birth=1,
                primary_address=Address(
                    use=AddressUse.HOME,
                    line=["string"],
                    city="string",
                    state="string",
                    postal_code="string",
                    country="string",
                    period=Period(),
                ),
                other_addresses=[
                    Address(
                        use=AddressUse.HOME,
                        line=["string"],
                        city="string",
                        state="string",
                        postal_code="string",
                        country="string",
                        period=Period(),
                    )
                ],
                primary_telecom=ContactPoint(
                    value="string",
                    use=ContactPointUse.HOME,
                ),
                other_telecoms=[
                    ContactPoint(
                        value="string",
                        use=ContactPointUse.HOME,
                    )
                ],
                email="string",
                electronic_communication_opt_in=True,
                photo="string",
                language="string",
                external_provenance=ExternalProvenance(
                    external_id="string",
                    system_name="string",
                ),
                contacts=[
                    Contact(
                        relationship=[Relationship.SELF],
                        name=HumanName(
                            family="string",
                            given=["string"],
                            use=NameUse.USUAL,
                            period=Period(),
                        ),
                        telecoms=[
                            ContactPoint(
                                value="string",
                                use=ContactPointUse.HOME,
                            )
                        ],
                        addresses=[
                            Address(
                                use=AddressUse.HOME,
                                line=["string"],
                                city="string",
                                state="string",
                                postal_code="string",
                                country="string",
                                period=Period(),
                            )
                        ],
                        period=Period(),
                        hipaa_authorization=True,
                    )
                ],
                general_practitioners=[
                    ExternalProvider(
                        name=HumanName(
                            family="string",
                            given=["string"],
                            use=NameUse.USUAL,
                            period=Period(),
                        ),
                        type=ExternalProviderType.PRIMARY,
                        npi="string",
                        telecoms=[
                            ContactPoint(
                                value="string",
                                use=ContactPointUse.HOME,
                            )
                        ],
                        addresses=[],
                        period=Period(),
                        canonical_id="string",
                        fax="string",
                    )
                ],
                filing_order=FilingOrder(
                    coverages=[
                        uuid.UUID(
                            "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                        )
                    ],
                ),
                non_insurance_payers=["string"],
                non_insurance_payer_associations=[
                    CanonicalNonInsurancePayerAssociation(
                        id="string",
                    )
                ],
                guarantor=Guarantor(
                    name=HumanName(
                        family="string",
                        given=["string"],
                        use=NameUse.USUAL,
                        period=Period(),
                    ),
                    telecom=ContactPoint(
                        value="string",
                        use=ContactPointUse.HOME,
                    ),
                    email="string",
                    birth_date=datetime.date.fromisoformat(
                        "2023-01-15",
                    ),
                    address=Address(
                        use=AddressUse.HOME,
                        line=["string"],
                        city="string",
                        state="string",
                        postal_code="string",
                        country="string",
                        period=Period(),
                    ),
                ),
                self_pay=True,
                authorizations=[
                    Authorization(
                        payer_id="string",
                        payer_name="string",
                        additional_payer_information=AdditionalPayerInformation(),
                        authorization_number="string",
                        cpt_code="string",
                        units=AuthorizationUnit.VISIT,
                        quantity=1,
                        period=Period(),
                        notes="string",
                    )
                ],
                referrals=[
                    Referral(
                        provider=ExternalProvider(
                            name=HumanName(
                                family="string",
                                given=["string"],
                                use=NameUse.USUAL,
                                period=Period(),
                            ),
                            type=ExternalProviderType.PRIMARY,
                            npi="string",
                            telecoms=[
                                ContactPoint(
                                    value="string",
                                    use=ContactPointUse.HOME,
                                )
                            ],
                            addresses=[],
                            period=Period(),
                            canonical_id="string",
                            fax="string",
                        ),
                        referral_number="string",
                    )
                ],
                primary_service_facility_id="string",
                do_not_invoice_reason=DoNotInvoiceReason.BANKRUPTCY,
                note_ids=["string"],
                tag_ids=["string"],
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "patients/v1",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="POST",
            params={
                "skip_duplicate_check": skip_duplicate_check,
            },
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                Patient,
                parse_obj_as(
                    type_=Patient,  # type: ignore
                    object_=_response_json,
                ),
            )
        if "errorName" in _response_json:
            if _response_json["errorName"] == "VersionConflictError":
                raise VersionConflictError(
                    typing.cast(
                        VersionConflictErrorBody,
                        parse_obj_as(
                            type_=VersionConflictErrorBody,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_with_mrn(
        self,
        *,
        request: MutablePatientWithMrn,
        skip_duplicate_check: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Patient:
        """
        Adds a patient and hydrates their MRN with a pre-existing MRN. Once this patient is created their MRN will not be editable. BadRequestError is returned when the MRN is greater than 20 characters. VersionConflictError is returned when the patient's external ID is already in use.

        Parameters
        ----------
        request : MutablePatientWithMrn

        skip_duplicate_check : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Patient

        Examples
        --------
        import datetime
        import uuid

        from candid import CandidApiClient
        from candid.resources.pre_encounter.resources.common import (
            AdditionalPayerInformation,
            Address,
            AddressUse,
            CanonicalNonInsurancePayerAssociation,
            ContactPoint,
            ContactPointUse,
            DisabilityStatus,
            Ethnicity,
            ExternalIdentifier,
            ExternalProvider,
            ExternalProviderType,
            Gender,
            HumanName,
            NameUse,
            Period,
            Race,
            Relationship,
            Sex,
            SexualOrientation,
        )
        from candid.resources.pre_encounter.resources.patients.resources.v_1 import (
            Authorization,
            AuthorizationUnit,
            Contact,
            DoNotInvoiceReason,
            ExternalProvenance,
            FilingOrder,
            Guarantor,
            MaritalStatus,
            MutablePatientWithMrn,
            Referral,
        )

        client = CandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.pre_encounter.patients.v_1.create_with_mrn(
            skip_duplicate_check=True,
            request=MutablePatientWithMrn(
                mrn="string",
                name=HumanName(
                    family="string",
                    given=["string"],
                    use=NameUse.USUAL,
                    period=Period(),
                ),
                other_names=[
                    HumanName(
                        family="string",
                        given=["string"],
                        use=NameUse.USUAL,
                        period=Period(),
                    )
                ],
                other_identifiers=[
                    ExternalIdentifier(
                        value="string",
                        system="string",
                    )
                ],
                gender=Gender.MAN,
                birth_date=datetime.date.fromisoformat(
                    "2023-01-15",
                ),
                social_security_number="string",
                biological_sex=Sex.FEMALE,
                sexual_orientation=SexualOrientation.HETEROSEXUAL,
                race=Race.AMERICAN_INDIAN_OR_ALASKA_NATIVE,
                ethnicity=Ethnicity.HISPANIC_OR_LATINO,
                disability_status=DisabilityStatus.DISABLED,
                marital_status=MaritalStatus.ANNULLED,
                deceased=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                multiple_birth=1,
                primary_address=Address(
                    use=AddressUse.HOME,
                    line=["string"],
                    city="string",
                    state="string",
                    postal_code="string",
                    country="string",
                    period=Period(),
                ),
                other_addresses=[
                    Address(
                        use=AddressUse.HOME,
                        line=["string"],
                        city="string",
                        state="string",
                        postal_code="string",
                        country="string",
                        period=Period(),
                    )
                ],
                primary_telecom=ContactPoint(
                    value="string",
                    use=ContactPointUse.HOME,
                ),
                other_telecoms=[
                    ContactPoint(
                        value="string",
                        use=ContactPointUse.HOME,
                    )
                ],
                email="string",
                electronic_communication_opt_in=True,
                photo="string",
                language="string",
                external_provenance=ExternalProvenance(
                    external_id="string",
                    system_name="string",
                ),
                contacts=[
                    Contact(
                        relationship=[Relationship.SELF],
                        name=HumanName(
                            family="string",
                            given=["string"],
                            use=NameUse.USUAL,
                            period=Period(),
                        ),
                        telecoms=[
                            ContactPoint(
                                value="string",
                                use=ContactPointUse.HOME,
                            )
                        ],
                        addresses=[
                            Address(
                                use=AddressUse.HOME,
                                line=["string"],
                                city="string",
                                state="string",
                                postal_code="string",
                                country="string",
                                period=Period(),
                            )
                        ],
                        period=Period(),
                        hipaa_authorization=True,
                    )
                ],
                general_practitioners=[
                    ExternalProvider(
                        name=HumanName(
                            family="string",
                            given=["string"],
                            use=NameUse.USUAL,
                            period=Period(),
                        ),
                        type=ExternalProviderType.PRIMARY,
                        npi="string",
                        telecoms=[
                            ContactPoint(
                                value="string",
                                use=ContactPointUse.HOME,
                            )
                        ],
                        addresses=[],
                        period=Period(),
                        canonical_id="string",
                        fax="string",
                    )
                ],
                filing_order=FilingOrder(
                    coverages=[
                        uuid.UUID(
                            "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                        )
                    ],
                ),
                non_insurance_payers=["string"],
                non_insurance_payer_associations=[
                    CanonicalNonInsurancePayerAssociation(
                        id="string",
                    )
                ],
                guarantor=Guarantor(
                    name=HumanName(
                        family="string",
                        given=["string"],
                        use=NameUse.USUAL,
                        period=Period(),
                    ),
                    telecom=ContactPoint(
                        value="string",
                        use=ContactPointUse.HOME,
                    ),
                    email="string",
                    birth_date=datetime.date.fromisoformat(
                        "2023-01-15",
                    ),
                    address=Address(
                        use=AddressUse.HOME,
                        line=["string"],
                        city="string",
                        state="string",
                        postal_code="string",
                        country="string",
                        period=Period(),
                    ),
                ),
                self_pay=True,
                authorizations=[
                    Authorization(
                        payer_id="string",
                        payer_name="string",
                        additional_payer_information=AdditionalPayerInformation(),
                        authorization_number="string",
                        cpt_code="string",
                        units=AuthorizationUnit.VISIT,
                        quantity=1,
                        period=Period(),
                        notes="string",
                    )
                ],
                referrals=[
                    Referral(
                        provider=ExternalProvider(
                            name=HumanName(
                                family="string",
                                given=["string"],
                                use=NameUse.USUAL,
                                period=Period(),
                            ),
                            type=ExternalProviderType.PRIMARY,
                            npi="string",
                            telecoms=[
                                ContactPoint(
                                    value="string",
                                    use=ContactPointUse.HOME,
                                )
                            ],
                            addresses=[],
                            period=Period(),
                            canonical_id="string",
                            fax="string",
                        ),
                        referral_number="string",
                    )
                ],
                primary_service_facility_id="string",
                do_not_invoice_reason=DoNotInvoiceReason.BANKRUPTCY,
                note_ids=["string"],
                tag_ids=["string"],
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "patients/v1/with_mrn",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="POST",
            params={
                "skip_duplicate_check": skip_duplicate_check,
            },
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                Patient,
                parse_obj_as(
                    type_=Patient,  # type: ignore
                    object_=_response_json,
                ),
            )
        if "errorName" in _response_json:
            if _response_json["errorName"] == "VersionConflictError":
                raise VersionConflictError(
                    typing.cast(
                        VersionConflictErrorBody,
                        parse_obj_as(
                            type_=VersionConflictErrorBody,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
            if _response_json["errorName"] == "BadRequestError":
                raise BadRequestError(
                    typing.cast(
                        ErrorBase4Xx,
                        parse_obj_as(
                            type_=ErrorBase4Xx,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_multi(
        self,
        *,
        limit: typing.Optional[int] = None,
        mrn: typing.Optional[str] = None,
        page_token: typing.Optional[PageToken] = None,
        sort_field: typing.Optional[PatientSortField] = None,
        sort_direction: typing.Optional[SortDirection] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PatientPage:
        """
        Searches for patients that match the query parameters.

        Parameters
        ----------
        limit : typing.Optional[int]

        mrn : typing.Optional[str]

        page_token : typing.Optional[PageToken]

        sort_field : typing.Optional[PatientSortField]

        sort_direction : typing.Optional[SortDirection]
            Defaults to ascending.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PatientPage

        Examples
        --------
        from candid import CandidApiClient
        from candid.resources.pre_encounter.resources.common import SortDirection

        client = CandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.pre_encounter.patients.v_1.get_multi(
            limit=1,
            mrn="string",
            page_token="string",
            sort_field="string",
            sort_direction=SortDirection.ASC,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "patients/v1/get_multi",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="GET",
            params={
                "limit": limit,
                "mrn": mrn,
                "page_token": page_token,
                "sort_field": sort_field,
                "sort_direction": sort_direction,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                PatientPage,
                parse_obj_as(
                    type_=PatientPage,  # type: ignore
                    object_=_response_json,
                ),
            )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, id: PatientId, *, request_options: typing.Optional[RequestOptions] = None) -> Patient:
        """
        Gets a patient.

        Parameters
        ----------
        id : PatientId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Patient

        Examples
        --------
        from candid import CandidApiClient

        client = CandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.pre_encounter.patients.v_1.get(
            id="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"patients/v1/{jsonable_encoder(id)}",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                Patient,
                parse_obj_as(
                    type_=Patient,  # type: ignore
                    object_=_response_json,
                ),
            )
        if "errorName" in _response_json:
            if _response_json["errorName"] == "NotFoundError":
                raise NotFoundError(
                    typing.cast(
                        ErrorBase4Xx,
                        parse_obj_as(
                            type_=ErrorBase4Xx,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_history(
        self, id: PatientId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Patient]:
        """
        Gets a patient along with it's full history. The return list is ordered by version ascending.

        Parameters
        ----------
        id : PatientId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Patient]

        Examples
        --------
        from candid import CandidApiClient

        client = CandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.pre_encounter.patients.v_1.get_history(
            id="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"patients/v1/{jsonable_encoder(id)}/history",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                typing.List[Patient],
                parse_obj_as(
                    type_=typing.List[Patient],  # type: ignore
                    object_=_response_json,
                ),
            )
        if "errorName" in _response_json:
            if _response_json["errorName"] == "NotFoundError":
                raise NotFoundError(
                    typing.cast(
                        ErrorBase4Xx,
                        parse_obj_as(
                            type_=ErrorBase4Xx,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        id: PatientId,
        version: str,
        *,
        request: MutablePatient,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Patient:
        """
        Updates a patient. The path must contain the most recent version to prevent race conditions. Updating historic versions is not supported.

        Parameters
        ----------
        id : PatientId

        version : str

        request : MutablePatient

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Patient

        Examples
        --------
        import datetime
        import uuid

        from candid import CandidApiClient
        from candid.resources.pre_encounter.resources.common import (
            AdditionalPayerInformation,
            Address,
            AddressUse,
            CanonicalNonInsurancePayerAssociation,
            ContactPoint,
            ContactPointUse,
            DisabilityStatus,
            Ethnicity,
            ExternalIdentifier,
            ExternalProvider,
            ExternalProviderType,
            Gender,
            HumanName,
            NameUse,
            Period,
            Race,
            Relationship,
            Sex,
            SexualOrientation,
        )
        from candid.resources.pre_encounter.resources.patients.resources.v_1 import (
            Authorization,
            AuthorizationUnit,
            Contact,
            DoNotInvoiceReason,
            ExternalProvenance,
            FilingOrder,
            Guarantor,
            MaritalStatus,
            MutablePatient,
            Referral,
        )

        client = CandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.pre_encounter.patients.v_1.update(
            id="string",
            version="string",
            request=MutablePatient(
                name=HumanName(
                    family="string",
                    given=["string"],
                    use=NameUse.USUAL,
                    period=Period(),
                ),
                other_names=[
                    HumanName(
                        family="string",
                        given=["string"],
                        use=NameUse.USUAL,
                        period=Period(),
                    )
                ],
                other_identifiers=[
                    ExternalIdentifier(
                        value="string",
                        system="string",
                    )
                ],
                gender=Gender.MAN,
                birth_date=datetime.date.fromisoformat(
                    "2023-01-15",
                ),
                social_security_number="string",
                biological_sex=Sex.FEMALE,
                sexual_orientation=SexualOrientation.HETEROSEXUAL,
                race=Race.AMERICAN_INDIAN_OR_ALASKA_NATIVE,
                ethnicity=Ethnicity.HISPANIC_OR_LATINO,
                disability_status=DisabilityStatus.DISABLED,
                marital_status=MaritalStatus.ANNULLED,
                deceased=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                multiple_birth=1,
                primary_address=Address(
                    use=AddressUse.HOME,
                    line=["string"],
                    city="string",
                    state="string",
                    postal_code="string",
                    country="string",
                    period=Period(),
                ),
                other_addresses=[
                    Address(
                        use=AddressUse.HOME,
                        line=["string"],
                        city="string",
                        state="string",
                        postal_code="string",
                        country="string",
                        period=Period(),
                    )
                ],
                primary_telecom=ContactPoint(
                    value="string",
                    use=ContactPointUse.HOME,
                ),
                other_telecoms=[
                    ContactPoint(
                        value="string",
                        use=ContactPointUse.HOME,
                    )
                ],
                email="string",
                electronic_communication_opt_in=True,
                photo="string",
                language="string",
                external_provenance=ExternalProvenance(
                    external_id="string",
                    system_name="string",
                ),
                contacts=[
                    Contact(
                        relationship=[Relationship.SELF],
                        name=HumanName(
                            family="string",
                            given=["string"],
                            use=NameUse.USUAL,
                            period=Period(),
                        ),
                        telecoms=[
                            ContactPoint(
                                value="string",
                                use=ContactPointUse.HOME,
                            )
                        ],
                        addresses=[
                            Address(
                                use=AddressUse.HOME,
                                line=["string"],
                                city="string",
                                state="string",
                                postal_code="string",
                                country="string",
                                period=Period(),
                            )
                        ],
                        period=Period(),
                        hipaa_authorization=True,
                    )
                ],
                general_practitioners=[
                    ExternalProvider(
                        name=HumanName(
                            family="string",
                            given=["string"],
                            use=NameUse.USUAL,
                            period=Period(),
                        ),
                        type=ExternalProviderType.PRIMARY,
                        npi="string",
                        telecoms=[
                            ContactPoint(
                                value="string",
                                use=ContactPointUse.HOME,
                            )
                        ],
                        addresses=[],
                        period=Period(),
                        canonical_id="string",
                        fax="string",
                    )
                ],
                filing_order=FilingOrder(
                    coverages=[
                        uuid.UUID(
                            "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                        )
                    ],
                ),
                non_insurance_payers=["string"],
                non_insurance_payer_associations=[
                    CanonicalNonInsurancePayerAssociation(
                        id="string",
                    )
                ],
                guarantor=Guarantor(
                    name=HumanName(
                        family="string",
                        given=["string"],
                        use=NameUse.USUAL,
                        period=Period(),
                    ),
                    telecom=ContactPoint(
                        value="string",
                        use=ContactPointUse.HOME,
                    ),
                    email="string",
                    birth_date=datetime.date.fromisoformat(
                        "2023-01-15",
                    ),
                    address=Address(
                        use=AddressUse.HOME,
                        line=["string"],
                        city="string",
                        state="string",
                        postal_code="string",
                        country="string",
                        period=Period(),
                    ),
                ),
                self_pay=True,
                authorizations=[
                    Authorization(
                        payer_id="string",
                        payer_name="string",
                        additional_payer_information=AdditionalPayerInformation(),
                        authorization_number="string",
                        cpt_code="string",
                        units=AuthorizationUnit.VISIT,
                        quantity=1,
                        period=Period(),
                        notes="string",
                    )
                ],
                referrals=[
                    Referral(
                        provider=ExternalProvider(
                            name=HumanName(
                                family="string",
                                given=["string"],
                                use=NameUse.USUAL,
                                period=Period(),
                            ),
                            type=ExternalProviderType.PRIMARY,
                            npi="string",
                            telecoms=[
                                ContactPoint(
                                    value="string",
                                    use=ContactPointUse.HOME,
                                )
                            ],
                            addresses=[],
                            period=Period(),
                            canonical_id="string",
                            fax="string",
                        ),
                        referral_number="string",
                    )
                ],
                primary_service_facility_id="string",
                do_not_invoice_reason=DoNotInvoiceReason.BANKRUPTCY,
                note_ids=["string"],
                tag_ids=["string"],
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"patients/v1/{jsonable_encoder(id)}/{jsonable_encoder(version)}",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="PUT",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                Patient,
                parse_obj_as(
                    type_=Patient,  # type: ignore
                    object_=_response_json,
                ),
            )
        if "errorName" in _response_json:
            if _response_json["errorName"] == "NotFoundError":
                raise NotFoundError(
                    typing.cast(
                        ErrorBase4Xx,
                        parse_obj_as(
                            type_=ErrorBase4Xx,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
            if _response_json["errorName"] == "VersionConflictError":
                raise VersionConflictError(
                    typing.cast(
                        VersionConflictErrorBody,
                        parse_obj_as(
                            type_=VersionConflictErrorBody,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def deactivate(
        self, id: PatientId, version: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Sets a patient as deactivated. The path must contain the most recent version plus 1 to prevent race conditions. Deactivating historic versions is not supported.

        Parameters
        ----------
        id : PatientId

        version : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from candid import CandidApiClient

        client = CandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.pre_encounter.patients.v_1.deactivate(
            id="string",
            version="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"patients/v1/{jsonable_encoder(id)}/{jsonable_encoder(version)}",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="DELETE",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if "errorName" in _response_json:
            if _response_json["errorName"] == "NotFoundError":
                raise NotFoundError(
                    typing.cast(
                        ErrorBase4Xx,
                        parse_obj_as(
                            type_=ErrorBase4Xx,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
            if _response_json["errorName"] == "VersionConflictError":
                raise VersionConflictError(
                    typing.cast(
                        VersionConflictErrorBody,
                        parse_obj_as(
                            type_=VersionConflictErrorBody,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def reactivate(
        self, id: PatientId, version: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Removes the deactivated flag for a patient. The path must contain the most recent version plus 1 to prevent race conditions. Reactivating historic versions is not supported.

        Parameters
        ----------
        id : PatientId

        version : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from candid import CandidApiClient

        client = CandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.pre_encounter.patients.v_1.reactivate(
            id="string",
            version="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"patients/v1/{jsonable_encoder(id)}/{jsonable_encoder(version)}",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="PATCH",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if "errorName" in _response_json:
            if _response_json["errorName"] == "NotFoundError":
                raise NotFoundError(
                    typing.cast(
                        ErrorBase4Xx,
                        parse_obj_as(
                            type_=ErrorBase4Xx,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
            if _response_json["errorName"] == "VersionConflictError":
                raise VersionConflictError(
                    typing.cast(
                        VersionConflictErrorBody,
                        parse_obj_as(
                            type_=VersionConflictErrorBody,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def search(
        self,
        *,
        mrn: typing.Optional[str] = None,
        similar_name_ordering: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Patient]:
        """
        Returns a list of Patients based on the search criteria.

        Parameters
        ----------
        mrn : typing.Optional[str]

        similar_name_ordering : typing.Optional[str]
            A string that is used to order similar names in search results.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Patient]

        Examples
        --------
        from candid import CandidApiClient

        client = CandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.pre_encounter.patients.v_1.search(
            mrn="string",
            similar_name_ordering="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "patients/v1",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="GET",
            params={
                "mrn": mrn,
                "similar_name_ordering": similar_name_ordering,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                typing.List[Patient],
                parse_obj_as(
                    type_=typing.List[Patient],  # type: ignore
                    object_=_response_json,
                ),
            )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def scan(
        self, *, since: dt.datetime, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Patient]:
        """
        Scans up to 100 patient updates. The since query parameter is inclusive, and the result list is ordered by updatedAt ascending.

        Parameters
        ----------
        since : dt.datetime

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Patient]

        Examples
        --------
        import datetime

        from candid import CandidApiClient

        client = CandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.pre_encounter.patients.v_1.scan(
            since=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "patients/v1/updates/scan",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="GET",
            params={
                "since": serialize_datetime(since),
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                typing.List[Patient],
                parse_obj_as(
                    type_=typing.List[Patient],  # type: ignore
                    object_=_response_json,
                ),
            )
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncV1Client:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        request: MutablePatient,
        skip_duplicate_check: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Patient:
        """
        Adds a patient. VersionConflictError is returned when the patient's external ID is already in use.

        Parameters
        ----------
        request : MutablePatient

        skip_duplicate_check : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Patient

        Examples
        --------
        import asyncio
        import datetime
        import uuid

        from candid import AsyncCandidApiClient
        from candid.resources.pre_encounter.resources.common import (
            AdditionalPayerInformation,
            Address,
            AddressUse,
            CanonicalNonInsurancePayerAssociation,
            ContactPoint,
            ContactPointUse,
            DisabilityStatus,
            Ethnicity,
            ExternalIdentifier,
            ExternalProvider,
            ExternalProviderType,
            Gender,
            HumanName,
            NameUse,
            Period,
            Race,
            Relationship,
            Sex,
            SexualOrientation,
        )
        from candid.resources.pre_encounter.resources.patients.resources.v_1 import (
            Authorization,
            AuthorizationUnit,
            Contact,
            DoNotInvoiceReason,
            ExternalProvenance,
            FilingOrder,
            Guarantor,
            MaritalStatus,
            MutablePatient,
            Referral,
        )

        client = AsyncCandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.pre_encounter.patients.v_1.create(
                skip_duplicate_check=True,
                request=MutablePatient(
                    name=HumanName(
                        family="string",
                        given=["string"],
                        use=NameUse.USUAL,
                        period=Period(),
                    ),
                    other_names=[
                        HumanName(
                            family="string",
                            given=["string"],
                            use=NameUse.USUAL,
                            period=Period(),
                        )
                    ],
                    other_identifiers=[
                        ExternalIdentifier(
                            value="string",
                            system="string",
                        )
                    ],
                    gender=Gender.MAN,
                    birth_date=datetime.date.fromisoformat(
                        "2023-01-15",
                    ),
                    social_security_number="string",
                    biological_sex=Sex.FEMALE,
                    sexual_orientation=SexualOrientation.HETEROSEXUAL,
                    race=Race.AMERICAN_INDIAN_OR_ALASKA_NATIVE,
                    ethnicity=Ethnicity.HISPANIC_OR_LATINO,
                    disability_status=DisabilityStatus.DISABLED,
                    marital_status=MaritalStatus.ANNULLED,
                    deceased=datetime.datetime.fromisoformat(
                        "2024-01-15 09:30:00+00:00",
                    ),
                    multiple_birth=1,
                    primary_address=Address(
                        use=AddressUse.HOME,
                        line=["string"],
                        city="string",
                        state="string",
                        postal_code="string",
                        country="string",
                        period=Period(),
                    ),
                    other_addresses=[
                        Address(
                            use=AddressUse.HOME,
                            line=["string"],
                            city="string",
                            state="string",
                            postal_code="string",
                            country="string",
                            period=Period(),
                        )
                    ],
                    primary_telecom=ContactPoint(
                        value="string",
                        use=ContactPointUse.HOME,
                    ),
                    other_telecoms=[
                        ContactPoint(
                            value="string",
                            use=ContactPointUse.HOME,
                        )
                    ],
                    email="string",
                    electronic_communication_opt_in=True,
                    photo="string",
                    language="string",
                    external_provenance=ExternalProvenance(
                        external_id="string",
                        system_name="string",
                    ),
                    contacts=[
                        Contact(
                            relationship=[Relationship.SELF],
                            name=HumanName(
                                family="string",
                                given=["string"],
                                use=NameUse.USUAL,
                                period=Period(),
                            ),
                            telecoms=[
                                ContactPoint(
                                    value="string",
                                    use=ContactPointUse.HOME,
                                )
                            ],
                            addresses=[
                                Address(
                                    use=AddressUse.HOME,
                                    line=["string"],
                                    city="string",
                                    state="string",
                                    postal_code="string",
                                    country="string",
                                    period=Period(),
                                )
                            ],
                            period=Period(),
                            hipaa_authorization=True,
                        )
                    ],
                    general_practitioners=[
                        ExternalProvider(
                            name=HumanName(
                                family="string",
                                given=["string"],
                                use=NameUse.USUAL,
                                period=Period(),
                            ),
                            type=ExternalProviderType.PRIMARY,
                            npi="string",
                            telecoms=[
                                ContactPoint(
                                    value="string",
                                    use=ContactPointUse.HOME,
                                )
                            ],
                            addresses=[],
                            period=Period(),
                            canonical_id="string",
                            fax="string",
                        )
                    ],
                    filing_order=FilingOrder(
                        coverages=[
                            uuid.UUID(
                                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                            )
                        ],
                    ),
                    non_insurance_payers=["string"],
                    non_insurance_payer_associations=[
                        CanonicalNonInsurancePayerAssociation(
                            id="string",
                        )
                    ],
                    guarantor=Guarantor(
                        name=HumanName(
                            family="string",
                            given=["string"],
                            use=NameUse.USUAL,
                            period=Period(),
                        ),
                        telecom=ContactPoint(
                            value="string",
                            use=ContactPointUse.HOME,
                        ),
                        email="string",
                        birth_date=datetime.date.fromisoformat(
                            "2023-01-15",
                        ),
                        address=Address(
                            use=AddressUse.HOME,
                            line=["string"],
                            city="string",
                            state="string",
                            postal_code="string",
                            country="string",
                            period=Period(),
                        ),
                    ),
                    self_pay=True,
                    authorizations=[
                        Authorization(
                            payer_id="string",
                            payer_name="string",
                            additional_payer_information=AdditionalPayerInformation(),
                            authorization_number="string",
                            cpt_code="string",
                            units=AuthorizationUnit.VISIT,
                            quantity=1,
                            period=Period(),
                            notes="string",
                        )
                    ],
                    referrals=[
                        Referral(
                            provider=ExternalProvider(
                                name=HumanName(
                                    family="string",
                                    given=["string"],
                                    use=NameUse.USUAL,
                                    period=Period(),
                                ),
                                type=ExternalProviderType.PRIMARY,
                                npi="string",
                                telecoms=[
                                    ContactPoint(
                                        value="string",
                                        use=ContactPointUse.HOME,
                                    )
                                ],
                                addresses=[],
                                period=Period(),
                                canonical_id="string",
                                fax="string",
                            ),
                            referral_number="string",
                        )
                    ],
                    primary_service_facility_id="string",
                    do_not_invoice_reason=DoNotInvoiceReason.BANKRUPTCY,
                    note_ids=["string"],
                    tag_ids=["string"],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "patients/v1",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="POST",
            params={
                "skip_duplicate_check": skip_duplicate_check,
            },
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                Patient,
                parse_obj_as(
                    type_=Patient,  # type: ignore
                    object_=_response_json,
                ),
            )
        if "errorName" in _response_json:
            if _response_json["errorName"] == "VersionConflictError":
                raise VersionConflictError(
                    typing.cast(
                        VersionConflictErrorBody,
                        parse_obj_as(
                            type_=VersionConflictErrorBody,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_with_mrn(
        self,
        *,
        request: MutablePatientWithMrn,
        skip_duplicate_check: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Patient:
        """
        Adds a patient and hydrates their MRN with a pre-existing MRN. Once this patient is created their MRN will not be editable. BadRequestError is returned when the MRN is greater than 20 characters. VersionConflictError is returned when the patient's external ID is already in use.

        Parameters
        ----------
        request : MutablePatientWithMrn

        skip_duplicate_check : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Patient

        Examples
        --------
        import asyncio
        import datetime
        import uuid

        from candid import AsyncCandidApiClient
        from candid.resources.pre_encounter.resources.common import (
            AdditionalPayerInformation,
            Address,
            AddressUse,
            CanonicalNonInsurancePayerAssociation,
            ContactPoint,
            ContactPointUse,
            DisabilityStatus,
            Ethnicity,
            ExternalIdentifier,
            ExternalProvider,
            ExternalProviderType,
            Gender,
            HumanName,
            NameUse,
            Period,
            Race,
            Relationship,
            Sex,
            SexualOrientation,
        )
        from candid.resources.pre_encounter.resources.patients.resources.v_1 import (
            Authorization,
            AuthorizationUnit,
            Contact,
            DoNotInvoiceReason,
            ExternalProvenance,
            FilingOrder,
            Guarantor,
            MaritalStatus,
            MutablePatientWithMrn,
            Referral,
        )

        client = AsyncCandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.pre_encounter.patients.v_1.create_with_mrn(
                skip_duplicate_check=True,
                request=MutablePatientWithMrn(
                    mrn="string",
                    name=HumanName(
                        family="string",
                        given=["string"],
                        use=NameUse.USUAL,
                        period=Period(),
                    ),
                    other_names=[
                        HumanName(
                            family="string",
                            given=["string"],
                            use=NameUse.USUAL,
                            period=Period(),
                        )
                    ],
                    other_identifiers=[
                        ExternalIdentifier(
                            value="string",
                            system="string",
                        )
                    ],
                    gender=Gender.MAN,
                    birth_date=datetime.date.fromisoformat(
                        "2023-01-15",
                    ),
                    social_security_number="string",
                    biological_sex=Sex.FEMALE,
                    sexual_orientation=SexualOrientation.HETEROSEXUAL,
                    race=Race.AMERICAN_INDIAN_OR_ALASKA_NATIVE,
                    ethnicity=Ethnicity.HISPANIC_OR_LATINO,
                    disability_status=DisabilityStatus.DISABLED,
                    marital_status=MaritalStatus.ANNULLED,
                    deceased=datetime.datetime.fromisoformat(
                        "2024-01-15 09:30:00+00:00",
                    ),
                    multiple_birth=1,
                    primary_address=Address(
                        use=AddressUse.HOME,
                        line=["string"],
                        city="string",
                        state="string",
                        postal_code="string",
                        country="string",
                        period=Period(),
                    ),
                    other_addresses=[
                        Address(
                            use=AddressUse.HOME,
                            line=["string"],
                            city="string",
                            state="string",
                            postal_code="string",
                            country="string",
                            period=Period(),
                        )
                    ],
                    primary_telecom=ContactPoint(
                        value="string",
                        use=ContactPointUse.HOME,
                    ),
                    other_telecoms=[
                        ContactPoint(
                            value="string",
                            use=ContactPointUse.HOME,
                        )
                    ],
                    email="string",
                    electronic_communication_opt_in=True,
                    photo="string",
                    language="string",
                    external_provenance=ExternalProvenance(
                        external_id="string",
                        system_name="string",
                    ),
                    contacts=[
                        Contact(
                            relationship=[Relationship.SELF],
                            name=HumanName(
                                family="string",
                                given=["string"],
                                use=NameUse.USUAL,
                                period=Period(),
                            ),
                            telecoms=[
                                ContactPoint(
                                    value="string",
                                    use=ContactPointUse.HOME,
                                )
                            ],
                            addresses=[
                                Address(
                                    use=AddressUse.HOME,
                                    line=["string"],
                                    city="string",
                                    state="string",
                                    postal_code="string",
                                    country="string",
                                    period=Period(),
                                )
                            ],
                            period=Period(),
                            hipaa_authorization=True,
                        )
                    ],
                    general_practitioners=[
                        ExternalProvider(
                            name=HumanName(
                                family="string",
                                given=["string"],
                                use=NameUse.USUAL,
                                period=Period(),
                            ),
                            type=ExternalProviderType.PRIMARY,
                            npi="string",
                            telecoms=[
                                ContactPoint(
                                    value="string",
                                    use=ContactPointUse.HOME,
                                )
                            ],
                            addresses=[],
                            period=Period(),
                            canonical_id="string",
                            fax="string",
                        )
                    ],
                    filing_order=FilingOrder(
                        coverages=[
                            uuid.UUID(
                                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                            )
                        ],
                    ),
                    non_insurance_payers=["string"],
                    non_insurance_payer_associations=[
                        CanonicalNonInsurancePayerAssociation(
                            id="string",
                        )
                    ],
                    guarantor=Guarantor(
                        name=HumanName(
                            family="string",
                            given=["string"],
                            use=NameUse.USUAL,
                            period=Period(),
                        ),
                        telecom=ContactPoint(
                            value="string",
                            use=ContactPointUse.HOME,
                        ),
                        email="string",
                        birth_date=datetime.date.fromisoformat(
                            "2023-01-15",
                        ),
                        address=Address(
                            use=AddressUse.HOME,
                            line=["string"],
                            city="string",
                            state="string",
                            postal_code="string",
                            country="string",
                            period=Period(),
                        ),
                    ),
                    self_pay=True,
                    authorizations=[
                        Authorization(
                            payer_id="string",
                            payer_name="string",
                            additional_payer_information=AdditionalPayerInformation(),
                            authorization_number="string",
                            cpt_code="string",
                            units=AuthorizationUnit.VISIT,
                            quantity=1,
                            period=Period(),
                            notes="string",
                        )
                    ],
                    referrals=[
                        Referral(
                            provider=ExternalProvider(
                                name=HumanName(
                                    family="string",
                                    given=["string"],
                                    use=NameUse.USUAL,
                                    period=Period(),
                                ),
                                type=ExternalProviderType.PRIMARY,
                                npi="string",
                                telecoms=[
                                    ContactPoint(
                                        value="string",
                                        use=ContactPointUse.HOME,
                                    )
                                ],
                                addresses=[],
                                period=Period(),
                                canonical_id="string",
                                fax="string",
                            ),
                            referral_number="string",
                        )
                    ],
                    primary_service_facility_id="string",
                    do_not_invoice_reason=DoNotInvoiceReason.BANKRUPTCY,
                    note_ids=["string"],
                    tag_ids=["string"],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "patients/v1/with_mrn",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="POST",
            params={
                "skip_duplicate_check": skip_duplicate_check,
            },
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                Patient,
                parse_obj_as(
                    type_=Patient,  # type: ignore
                    object_=_response_json,
                ),
            )
        if "errorName" in _response_json:
            if _response_json["errorName"] == "VersionConflictError":
                raise VersionConflictError(
                    typing.cast(
                        VersionConflictErrorBody,
                        parse_obj_as(
                            type_=VersionConflictErrorBody,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
            if _response_json["errorName"] == "BadRequestError":
                raise BadRequestError(
                    typing.cast(
                        ErrorBase4Xx,
                        parse_obj_as(
                            type_=ErrorBase4Xx,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_multi(
        self,
        *,
        limit: typing.Optional[int] = None,
        mrn: typing.Optional[str] = None,
        page_token: typing.Optional[PageToken] = None,
        sort_field: typing.Optional[PatientSortField] = None,
        sort_direction: typing.Optional[SortDirection] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PatientPage:
        """
        Searches for patients that match the query parameters.

        Parameters
        ----------
        limit : typing.Optional[int]

        mrn : typing.Optional[str]

        page_token : typing.Optional[PageToken]

        sort_field : typing.Optional[PatientSortField]

        sort_direction : typing.Optional[SortDirection]
            Defaults to ascending.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PatientPage

        Examples
        --------
        import asyncio

        from candid import AsyncCandidApiClient
        from candid.resources.pre_encounter.resources.common import SortDirection

        client = AsyncCandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.pre_encounter.patients.v_1.get_multi(
                limit=1,
                mrn="string",
                page_token="string",
                sort_field="string",
                sort_direction=SortDirection.ASC,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "patients/v1/get_multi",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="GET",
            params={
                "limit": limit,
                "mrn": mrn,
                "page_token": page_token,
                "sort_field": sort_field,
                "sort_direction": sort_direction,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                PatientPage,
                parse_obj_as(
                    type_=PatientPage,  # type: ignore
                    object_=_response_json,
                ),
            )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, id: PatientId, *, request_options: typing.Optional[RequestOptions] = None) -> Patient:
        """
        Gets a patient.

        Parameters
        ----------
        id : PatientId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Patient

        Examples
        --------
        import asyncio

        from candid import AsyncCandidApiClient

        client = AsyncCandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.pre_encounter.patients.v_1.get(
                id="string",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"patients/v1/{jsonable_encoder(id)}",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                Patient,
                parse_obj_as(
                    type_=Patient,  # type: ignore
                    object_=_response_json,
                ),
            )
        if "errorName" in _response_json:
            if _response_json["errorName"] == "NotFoundError":
                raise NotFoundError(
                    typing.cast(
                        ErrorBase4Xx,
                        parse_obj_as(
                            type_=ErrorBase4Xx,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_history(
        self, id: PatientId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Patient]:
        """
        Gets a patient along with it's full history. The return list is ordered by version ascending.

        Parameters
        ----------
        id : PatientId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Patient]

        Examples
        --------
        import asyncio

        from candid import AsyncCandidApiClient

        client = AsyncCandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.pre_encounter.patients.v_1.get_history(
                id="string",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"patients/v1/{jsonable_encoder(id)}/history",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                typing.List[Patient],
                parse_obj_as(
                    type_=typing.List[Patient],  # type: ignore
                    object_=_response_json,
                ),
            )
        if "errorName" in _response_json:
            if _response_json["errorName"] == "NotFoundError":
                raise NotFoundError(
                    typing.cast(
                        ErrorBase4Xx,
                        parse_obj_as(
                            type_=ErrorBase4Xx,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        id: PatientId,
        version: str,
        *,
        request: MutablePatient,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Patient:
        """
        Updates a patient. The path must contain the most recent version to prevent race conditions. Updating historic versions is not supported.

        Parameters
        ----------
        id : PatientId

        version : str

        request : MutablePatient

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Patient

        Examples
        --------
        import asyncio
        import datetime
        import uuid

        from candid import AsyncCandidApiClient
        from candid.resources.pre_encounter.resources.common import (
            AdditionalPayerInformation,
            Address,
            AddressUse,
            CanonicalNonInsurancePayerAssociation,
            ContactPoint,
            ContactPointUse,
            DisabilityStatus,
            Ethnicity,
            ExternalIdentifier,
            ExternalProvider,
            ExternalProviderType,
            Gender,
            HumanName,
            NameUse,
            Period,
            Race,
            Relationship,
            Sex,
            SexualOrientation,
        )
        from candid.resources.pre_encounter.resources.patients.resources.v_1 import (
            Authorization,
            AuthorizationUnit,
            Contact,
            DoNotInvoiceReason,
            ExternalProvenance,
            FilingOrder,
            Guarantor,
            MaritalStatus,
            MutablePatient,
            Referral,
        )

        client = AsyncCandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.pre_encounter.patients.v_1.update(
                id="string",
                version="string",
                request=MutablePatient(
                    name=HumanName(
                        family="string",
                        given=["string"],
                        use=NameUse.USUAL,
                        period=Period(),
                    ),
                    other_names=[
                        HumanName(
                            family="string",
                            given=["string"],
                            use=NameUse.USUAL,
                            period=Period(),
                        )
                    ],
                    other_identifiers=[
                        ExternalIdentifier(
                            value="string",
                            system="string",
                        )
                    ],
                    gender=Gender.MAN,
                    birth_date=datetime.date.fromisoformat(
                        "2023-01-15",
                    ),
                    social_security_number="string",
                    biological_sex=Sex.FEMALE,
                    sexual_orientation=SexualOrientation.HETEROSEXUAL,
                    race=Race.AMERICAN_INDIAN_OR_ALASKA_NATIVE,
                    ethnicity=Ethnicity.HISPANIC_OR_LATINO,
                    disability_status=DisabilityStatus.DISABLED,
                    marital_status=MaritalStatus.ANNULLED,
                    deceased=datetime.datetime.fromisoformat(
                        "2024-01-15 09:30:00+00:00",
                    ),
                    multiple_birth=1,
                    primary_address=Address(
                        use=AddressUse.HOME,
                        line=["string"],
                        city="string",
                        state="string",
                        postal_code="string",
                        country="string",
                        period=Period(),
                    ),
                    other_addresses=[
                        Address(
                            use=AddressUse.HOME,
                            line=["string"],
                            city="string",
                            state="string",
                            postal_code="string",
                            country="string",
                            period=Period(),
                        )
                    ],
                    primary_telecom=ContactPoint(
                        value="string",
                        use=ContactPointUse.HOME,
                    ),
                    other_telecoms=[
                        ContactPoint(
                            value="string",
                            use=ContactPointUse.HOME,
                        )
                    ],
                    email="string",
                    electronic_communication_opt_in=True,
                    photo="string",
                    language="string",
                    external_provenance=ExternalProvenance(
                        external_id="string",
                        system_name="string",
                    ),
                    contacts=[
                        Contact(
                            relationship=[Relationship.SELF],
                            name=HumanName(
                                family="string",
                                given=["string"],
                                use=NameUse.USUAL,
                                period=Period(),
                            ),
                            telecoms=[
                                ContactPoint(
                                    value="string",
                                    use=ContactPointUse.HOME,
                                )
                            ],
                            addresses=[
                                Address(
                                    use=AddressUse.HOME,
                                    line=["string"],
                                    city="string",
                                    state="string",
                                    postal_code="string",
                                    country="string",
                                    period=Period(),
                                )
                            ],
                            period=Period(),
                            hipaa_authorization=True,
                        )
                    ],
                    general_practitioners=[
                        ExternalProvider(
                            name=HumanName(
                                family="string",
                                given=["string"],
                                use=NameUse.USUAL,
                                period=Period(),
                            ),
                            type=ExternalProviderType.PRIMARY,
                            npi="string",
                            telecoms=[
                                ContactPoint(
                                    value="string",
                                    use=ContactPointUse.HOME,
                                )
                            ],
                            addresses=[],
                            period=Period(),
                            canonical_id="string",
                            fax="string",
                        )
                    ],
                    filing_order=FilingOrder(
                        coverages=[
                            uuid.UUID(
                                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                            )
                        ],
                    ),
                    non_insurance_payers=["string"],
                    non_insurance_payer_associations=[
                        CanonicalNonInsurancePayerAssociation(
                            id="string",
                        )
                    ],
                    guarantor=Guarantor(
                        name=HumanName(
                            family="string",
                            given=["string"],
                            use=NameUse.USUAL,
                            period=Period(),
                        ),
                        telecom=ContactPoint(
                            value="string",
                            use=ContactPointUse.HOME,
                        ),
                        email="string",
                        birth_date=datetime.date.fromisoformat(
                            "2023-01-15",
                        ),
                        address=Address(
                            use=AddressUse.HOME,
                            line=["string"],
                            city="string",
                            state="string",
                            postal_code="string",
                            country="string",
                            period=Period(),
                        ),
                    ),
                    self_pay=True,
                    authorizations=[
                        Authorization(
                            payer_id="string",
                            payer_name="string",
                            additional_payer_information=AdditionalPayerInformation(),
                            authorization_number="string",
                            cpt_code="string",
                            units=AuthorizationUnit.VISIT,
                            quantity=1,
                            period=Period(),
                            notes="string",
                        )
                    ],
                    referrals=[
                        Referral(
                            provider=ExternalProvider(
                                name=HumanName(
                                    family="string",
                                    given=["string"],
                                    use=NameUse.USUAL,
                                    period=Period(),
                                ),
                                type=ExternalProviderType.PRIMARY,
                                npi="string",
                                telecoms=[
                                    ContactPoint(
                                        value="string",
                                        use=ContactPointUse.HOME,
                                    )
                                ],
                                addresses=[],
                                period=Period(),
                                canonical_id="string",
                                fax="string",
                            ),
                            referral_number="string",
                        )
                    ],
                    primary_service_facility_id="string",
                    do_not_invoice_reason=DoNotInvoiceReason.BANKRUPTCY,
                    note_ids=["string"],
                    tag_ids=["string"],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"patients/v1/{jsonable_encoder(id)}/{jsonable_encoder(version)}",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="PUT",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                Patient,
                parse_obj_as(
                    type_=Patient,  # type: ignore
                    object_=_response_json,
                ),
            )
        if "errorName" in _response_json:
            if _response_json["errorName"] == "NotFoundError":
                raise NotFoundError(
                    typing.cast(
                        ErrorBase4Xx,
                        parse_obj_as(
                            type_=ErrorBase4Xx,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
            if _response_json["errorName"] == "VersionConflictError":
                raise VersionConflictError(
                    typing.cast(
                        VersionConflictErrorBody,
                        parse_obj_as(
                            type_=VersionConflictErrorBody,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def deactivate(
        self, id: PatientId, version: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Sets a patient as deactivated. The path must contain the most recent version plus 1 to prevent race conditions. Deactivating historic versions is not supported.

        Parameters
        ----------
        id : PatientId

        version : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from candid import AsyncCandidApiClient

        client = AsyncCandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.pre_encounter.patients.v_1.deactivate(
                id="string",
                version="string",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"patients/v1/{jsonable_encoder(id)}/{jsonable_encoder(version)}",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="DELETE",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if "errorName" in _response_json:
            if _response_json["errorName"] == "NotFoundError":
                raise NotFoundError(
                    typing.cast(
                        ErrorBase4Xx,
                        parse_obj_as(
                            type_=ErrorBase4Xx,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
            if _response_json["errorName"] == "VersionConflictError":
                raise VersionConflictError(
                    typing.cast(
                        VersionConflictErrorBody,
                        parse_obj_as(
                            type_=VersionConflictErrorBody,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def reactivate(
        self, id: PatientId, version: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Removes the deactivated flag for a patient. The path must contain the most recent version plus 1 to prevent race conditions. Reactivating historic versions is not supported.

        Parameters
        ----------
        id : PatientId

        version : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from candid import AsyncCandidApiClient

        client = AsyncCandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.pre_encounter.patients.v_1.reactivate(
                id="string",
                version="string",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"patients/v1/{jsonable_encoder(id)}/{jsonable_encoder(version)}",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="PATCH",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if "errorName" in _response_json:
            if _response_json["errorName"] == "NotFoundError":
                raise NotFoundError(
                    typing.cast(
                        ErrorBase4Xx,
                        parse_obj_as(
                            type_=ErrorBase4Xx,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
            if _response_json["errorName"] == "VersionConflictError":
                raise VersionConflictError(
                    typing.cast(
                        VersionConflictErrorBody,
                        parse_obj_as(
                            type_=VersionConflictErrorBody,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    )
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def search(
        self,
        *,
        mrn: typing.Optional[str] = None,
        similar_name_ordering: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Patient]:
        """
        Returns a list of Patients based on the search criteria.

        Parameters
        ----------
        mrn : typing.Optional[str]

        similar_name_ordering : typing.Optional[str]
            A string that is used to order similar names in search results.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Patient]

        Examples
        --------
        import asyncio

        from candid import AsyncCandidApiClient

        client = AsyncCandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.pre_encounter.patients.v_1.search(
                mrn="string",
                similar_name_ordering="string",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "patients/v1",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="GET",
            params={
                "mrn": mrn,
                "similar_name_ordering": similar_name_ordering,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                typing.List[Patient],
                parse_obj_as(
                    type_=typing.List[Patient],  # type: ignore
                    object_=_response_json,
                ),
            )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def scan(
        self, *, since: dt.datetime, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Patient]:
        """
        Scans up to 100 patient updates. The since query parameter is inclusive, and the result list is ordered by updatedAt ascending.

        Parameters
        ----------
        since : dt.datetime

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Patient]

        Examples
        --------
        import asyncio
        import datetime

        from candid import AsyncCandidApiClient

        client = AsyncCandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.pre_encounter.patients.v_1.scan(
                since=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "patients/v1/updates/scan",
            base_url=self._client_wrapper.get_environment().pre_encounter,
            method="GET",
            params={
                "since": serialize_datetime(since),
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(
                typing.List[Patient],
                parse_obj_as(
                    type_=typing.List[Patient],  # type: ignore
                    object_=_response_json,
                ),
            )
        raise ApiError(status_code=_response.status_code, body=_response_json)
