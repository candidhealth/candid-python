# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class UniversalServiceIdentifier(str, enum.Enum):
    MD_VISIT = "MD_Visit"
    TREATMENT = "Treatment"
    TESTS = "Tests"
    ACTIVITY = "Activity"
    _UNKNOWN = "__UNIVERSALSERVICEIDENTIFIER_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "UniversalServiceIdentifier":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        md_visit: typing.Callable[[], T_Result],
        treatment: typing.Callable[[], T_Result],
        tests: typing.Callable[[], T_Result],
        activity: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is UniversalServiceIdentifier.MD_VISIT:
            return md_visit()
        if self is UniversalServiceIdentifier.TREATMENT:
            return treatment()
        if self is UniversalServiceIdentifier.TESTS:
            return tests()
        if self is UniversalServiceIdentifier.ACTIVITY:
            return activity()
        return _unknown_member(self._value_)
