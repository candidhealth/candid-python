# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class AppointmentStatus(str, enum.Enum):
    PENDING = "PENDING"
    NOT_READY = "NOT_READY"
    READY = "READY"
    CHECKED_IN = "CHECKED_IN"
    _UNKNOWN = "__APPOINTMENTSTATUS_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "AppointmentStatus":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        pending: typing.Callable[[], T_Result],
        not_ready: typing.Callable[[], T_Result],
        ready: typing.Callable[[], T_Result],
        checked_in: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is AppointmentStatus.PENDING:
            return pending()
        if self is AppointmentStatus.NOT_READY:
            return not_ready()
        if self is AppointmentStatus.READY:
            return ready()
        if self is AppointmentStatus.CHECKED_IN:
            return checked_in()
        return _unknown_member(self._value_)
