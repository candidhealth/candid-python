# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from .....core.api_error import ApiError
from .....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .....core.jsonable_encoder import jsonable_encoder
from .....core.pydantic_utilities import pydantic_v1
from .....core.query_encoder import encode_query
from .....core.remove_none_from_dict import remove_none_from_dict
from .....core.request_options import RequestOptions
from ....commons.types.date import Date
from ....commons.types.insurance_type_code import InsuranceTypeCode
from ....commons.types.state import State
from .types.expected_network_status_response import ExpectedNetworkStatusResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class V1Client:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def compute(
        self,
        *,
        subscriber_payer_id: str,
        subscriber_payer_name: str,
        billing_provider_npi: str,
        billing_provider_tin: str,
        rendering_provider_npi: str,
        contracted_state: State,
        date_of_service: Date,
        external_patient_id: typing.Optional[str] = OMIT,
        subscriber_insurance_type: typing.Optional[InsuranceTypeCode] = OMIT,
        subscriber_plan_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ExpectedNetworkStatusResponse:
        """
        Computes the expected network status given the provided information.

        Parameters
        ----------
        subscriber_payer_id : str

        subscriber_payer_name : str

        billing_provider_npi : str
            The National Provider Identifier (NPI) of the healthcare provider responsible for billing. A unique 10-digit identification number.

        billing_provider_tin : str
            Follow the 9-digit format of the Taxpayer Identification Number (TIN).

        rendering_provider_npi : str
            The National Provider Identifier (NPI) of the healthcare provider who delivered the services. A unique 10-digit identification number.

        contracted_state : State
            The state in which the healthcare provider has a contractual agreement with the insurance payer.

        date_of_service : Date
            Date formatted as YYYY-MM-DD; eg: 2019-08-25.


        external_patient_id : typing.Optional[str]

        subscriber_insurance_type : typing.Optional[InsuranceTypeCode]

        subscriber_plan_name : typing.Optional[str]
            The descriptive name of the insurance plan selected by the subscriber, often indicating coverage specifics or tier.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ExpectedNetworkStatusResponse

        Examples
        --------
        from candid.client import CandidApiClient

        client = CandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.expected_network_status.v_1.compute(
            external_patient_id="string",
            subscriber_payer_id="string",
            subscriber_payer_name="string",
            subscriber_insurance_type="01",
            subscriber_plan_name="string",
            billing_provider_npi="string",
            billing_provider_tin="string",
            rendering_provider_npi="string",
            contracted_state="AA",
            date_of_service="string",
        )
        """
        _request: typing.Dict[str, typing.Any] = {
            "subscriber_payer_id": subscriber_payer_id,
            "subscriber_payer_name": subscriber_payer_name,
            "billing_provider_npi": billing_provider_npi,
            "billing_provider_tin": billing_provider_tin,
            "rendering_provider_npi": rendering_provider_npi,
            "contracted_state": contracted_state,
            "date_of_service": date_of_service,
        }
        if external_patient_id is not OMIT:
            _request["external_patient_id"] = external_patient_id
        if subscriber_insurance_type is not OMIT:
            _request["subscriber_insurance_type"] = subscriber_insurance_type
        if subscriber_plan_name is not OMIT:
            _request["subscriber_plan_name"] = subscriber_plan_name
        _response = self._client_wrapper.httpx_client.request(
            method="POST",
            url=urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/expected-network-status/v1"),
            params=encode_query(
                jsonable_encoder(
                    request_options.get("additional_query_parameters") if request_options is not None else None
                )
            ),
            json=jsonable_encoder(_request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(_request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ExpectedNetworkStatusResponse, _response_json)  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncV1Client:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def compute(
        self,
        *,
        subscriber_payer_id: str,
        subscriber_payer_name: str,
        billing_provider_npi: str,
        billing_provider_tin: str,
        rendering_provider_npi: str,
        contracted_state: State,
        date_of_service: Date,
        external_patient_id: typing.Optional[str] = OMIT,
        subscriber_insurance_type: typing.Optional[InsuranceTypeCode] = OMIT,
        subscriber_plan_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ExpectedNetworkStatusResponse:
        """
        Computes the expected network status given the provided information.

        Parameters
        ----------
        subscriber_payer_id : str

        subscriber_payer_name : str

        billing_provider_npi : str
            The National Provider Identifier (NPI) of the healthcare provider responsible for billing. A unique 10-digit identification number.

        billing_provider_tin : str
            Follow the 9-digit format of the Taxpayer Identification Number (TIN).

        rendering_provider_npi : str
            The National Provider Identifier (NPI) of the healthcare provider who delivered the services. A unique 10-digit identification number.

        contracted_state : State
            The state in which the healthcare provider has a contractual agreement with the insurance payer.

        date_of_service : Date
            Date formatted as YYYY-MM-DD; eg: 2019-08-25.


        external_patient_id : typing.Optional[str]

        subscriber_insurance_type : typing.Optional[InsuranceTypeCode]

        subscriber_plan_name : typing.Optional[str]
            The descriptive name of the insurance plan selected by the subscriber, often indicating coverage specifics or tier.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ExpectedNetworkStatusResponse

        Examples
        --------
        from candid.client import AsyncCandidApiClient

        client = AsyncCandidApiClient(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        await client.expected_network_status.v_1.compute(
            external_patient_id="string",
            subscriber_payer_id="string",
            subscriber_payer_name="string",
            subscriber_insurance_type="01",
            subscriber_plan_name="string",
            billing_provider_npi="string",
            billing_provider_tin="string",
            rendering_provider_npi="string",
            contracted_state="AA",
            date_of_service="string",
        )
        """
        _request: typing.Dict[str, typing.Any] = {
            "subscriber_payer_id": subscriber_payer_id,
            "subscriber_payer_name": subscriber_payer_name,
            "billing_provider_npi": billing_provider_npi,
            "billing_provider_tin": billing_provider_tin,
            "rendering_provider_npi": rendering_provider_npi,
            "contracted_state": contracted_state,
            "date_of_service": date_of_service,
        }
        if external_patient_id is not OMIT:
            _request["external_patient_id"] = external_patient_id
        if subscriber_insurance_type is not OMIT:
            _request["subscriber_insurance_type"] = subscriber_insurance_type
        if subscriber_plan_name is not OMIT:
            _request["subscriber_plan_name"] = subscriber_plan_name
        _response = await self._client_wrapper.httpx_client.request(
            method="POST",
            url=urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/expected-network-status/v1"),
            params=encode_query(
                jsonable_encoder(
                    request_options.get("additional_query_parameters") if request_options is not None else None
                )
            ),
            json=jsonable_encoder(_request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(_request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ExpectedNetworkStatusResponse, _response_json)  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)
