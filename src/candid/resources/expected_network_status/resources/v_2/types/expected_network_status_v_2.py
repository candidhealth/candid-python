# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import pydantic
import typing_extensions

from ......core.datetime_utils import serialize_datetime
from ......core.pydantic_utilities import deep_union_pydantic_dicts
from .in_network_status import InNetworkStatus
from .indeterminate_network_status import IndeterminateNetworkStatus
from .out_of_network_status import OutOfNetworkStatus

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def in_network(self, value: InNetworkStatus) -> ExpectedNetworkStatusV2:
        return ExpectedNetworkStatusV2(
            __root__=_ExpectedNetworkStatusV2.InNetwork(**value.dict(exclude_unset=True), type="in_network")
        )

    def out_of_network(self, value: OutOfNetworkStatus) -> ExpectedNetworkStatusV2:
        return ExpectedNetworkStatusV2(
            __root__=_ExpectedNetworkStatusV2.OutOfNetwork(**value.dict(exclude_unset=True), type="out_of_network")
        )

    def indeterminate(self, value: IndeterminateNetworkStatus) -> ExpectedNetworkStatusV2:
        return ExpectedNetworkStatusV2(
            __root__=_ExpectedNetworkStatusV2.Indeterminate(**value.dict(exclude_unset=True), type="indeterminate")
        )


class ExpectedNetworkStatusV2(pydantic.BaseModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    def get_as_union(
        self,
    ) -> typing.Union[
        _ExpectedNetworkStatusV2.InNetwork,
        _ExpectedNetworkStatusV2.OutOfNetwork,
        _ExpectedNetworkStatusV2.Indeterminate,
    ]:
        return self.__root__

    def visit(
        self,
        in_network: typing.Callable[[InNetworkStatus], T_Result],
        out_of_network: typing.Callable[[OutOfNetworkStatus], T_Result],
        indeterminate: typing.Callable[[IndeterminateNetworkStatus], T_Result],
    ) -> T_Result:
        if self.__root__.type == "in_network":
            return in_network(InNetworkStatus(**self.__root__.dict(exclude_unset=True, exclude={"type"})))
        if self.__root__.type == "out_of_network":
            return out_of_network(OutOfNetworkStatus(**self.__root__.dict(exclude_unset=True, exclude={"type"})))
        if self.__root__.type == "indeterminate":
            return indeterminate(IndeterminateNetworkStatus(**self.__root__.dict(exclude_unset=True, exclude={"type"})))

    __root__: typing_extensions.Annotated[
        typing.Union[
            _ExpectedNetworkStatusV2.InNetwork,
            _ExpectedNetworkStatusV2.OutOfNetwork,
            _ExpectedNetworkStatusV2.Indeterminate,
        ],
        pydantic.Field(discriminator="type"),
    ]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}


class _ExpectedNetworkStatusV2:
    class InNetwork(InNetworkStatus):
        type: typing.Literal["in_network"] = "in_network"

        class Config:
            frozen = True
            smart_union = True
            allow_population_by_field_name = True
            populate_by_name = True

    class OutOfNetwork(OutOfNetworkStatus):
        type: typing.Literal["out_of_network"] = "out_of_network"

        class Config:
            frozen = True
            smart_union = True
            allow_population_by_field_name = True
            populate_by_name = True

    class Indeterminate(IndeterminateNetworkStatus):
        type: typing.Literal["indeterminate"] = "indeterminate"

        class Config:
            frozen = True
            smart_union = True
            allow_population_by_field_name = True
            populate_by_name = True


ExpectedNetworkStatusV2.update_forward_refs()
