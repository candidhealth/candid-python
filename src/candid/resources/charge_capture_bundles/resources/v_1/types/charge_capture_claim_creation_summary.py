# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class ChargeCaptureClaimCreationSummary(UniversalBaseModel):
    charge_capture_charges_not_linked_to_claims_count: int = pydantic.Field()
    """
    The count of charge captures which are not part of a Claim Creation.
    """

    charge_capture_claim_creations_not_started_count: int = pydantic.Field()
    """
    The count of charge capture claim_creations that have a Claim Creation status of NOT_STARTED.
    """

    charge_capture_held_claim_creations_count: int = pydantic.Field()
    """
    The count of charge capture claim_creations that have a Claim Creation status of HELD.
    """

    charge_capture_claim_creations_in_error_count: int = pydantic.Field()
    """
    The count of charge capture claim_creations that have a Claim Creation status of IN_ERROR.
    """

    charge_capture_unresolved_change_count: int = pydantic.Field()
    """
    The number of ChargeCapturePostBilledChange items that are unresolved.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
