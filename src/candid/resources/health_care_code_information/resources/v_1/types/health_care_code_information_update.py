# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .condition_information import ConditionInformation
from .external_cause_of_injury import ExternalCauseOfInjury
from .occurrence_information import OccurrenceInformation
from .occurrence_span_information import OccurrenceSpanInformation
from .other_diagnosis_information import OtherDiagnosisInformation
from .other_procedure_information import OtherProcedureInformation
from .patient_reason_for_visit import PatientReasonForVisit
from .set_or_clear_admitting_diagnosis import SetOrClearAdmittingDiagnosis
from .set_or_clear_diagnosis_related_group import SetOrClearDiagnosisRelatedGroup
from .set_or_clear_principal_diagnosis import SetOrClearPrincipalDiagnosis
from .set_or_clear_principal_procedure_information import SetOrClearPrincipalProcedureInformation
from .treatment_code_information import TreatmentCodeInformation
from .value_information import ValueInformation


class HealthCareCodeInformationUpdate(UniversalBaseModel):
    principal_diagnosis: typing.Optional[SetOrClearPrincipalDiagnosis] = None
    admitting_diagnosis: typing.Optional[SetOrClearAdmittingDiagnosis] = None
    patient_reasons_for_visit: typing.Optional[typing.List[PatientReasonForVisit]] = None
    external_causes_of_injury: typing.Optional[typing.List[ExternalCauseOfInjury]] = None
    diagnosis_related_groups: typing.Optional[SetOrClearDiagnosisRelatedGroup] = None
    other_diagnosis_information: typing.Optional[typing.List[OtherDiagnosisInformation]] = None
    principal_procedure: typing.Optional[SetOrClearPrincipalProcedureInformation] = None
    other_procedure_information: typing.Optional[typing.List[OtherProcedureInformation]] = None
    occurrence_span_information: typing.Optional[typing.List[OccurrenceSpanInformation]] = None
    occurrence_information: typing.Optional[typing.List[OccurrenceInformation]] = None
    treatment_code_information: typing.Optional[typing.List[TreatmentCodeInformation]] = None
    value_information: typing.Optional[typing.List[ValueInformation]] = None
    condition_information: typing.Optional[typing.List[ConditionInformation]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
