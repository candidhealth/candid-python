# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class PatientReasonForVisitCodeQualifier(str, enum.Enum):
    CPR = "PR"
    """
    International Classification of Diseases Clinical Modification (ICD-9-CM) Patient's Reason for Visit
    """

    CAPR = "APR"
    """
    International Classification of Diseases Clinical Modification (ICD-10-CM) Patient's Reason for Visit
    """

    _UNKNOWN = "__PATIENTREASONFORVISITCODEQUALIFIER_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "PatientReasonForVisitCodeQualifier":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        cpr: typing.Callable[[], T_Result],
        capr: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is PatientReasonForVisitCodeQualifier.CPR:
            return cpr()
        if self is PatientReasonForVisitCodeQualifier.CAPR:
            return capr()
        return _unknown_member(self._value_)
