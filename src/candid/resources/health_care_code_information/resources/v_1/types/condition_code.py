# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class ConditionCode(str, enum.Enum):
    """

    FL 18-28 - Condition Codes
    Source: UB-04 Manual 2025, Pages 64-81 (FL18-28, Pages 1-18)
    Excludes codes designated as "Payer Codes" or "FOR PUBLIC HEALTH DATA REPORTING ONLY"
    unless usage on claims is indicated.

    """

    C_01 = "01"
    """
    MILITARY SERVICE RELATED - Medical condition incurred during military service.
    """

    C_02 = "02"
    """
    CONDITION IS EMPLOYMENT RELATED - Patient alleges that medical condition is due to environment/events resulting from employment.
    """

    C_03 = "03"
    """
    PATIENT COVERED BY INSURANCE NOT REFLECTED HERE - Indicates that patient/patient representative has stated that coverage may exist beyond that reflected on this bill.
    """

    C_04 = "04"
    """
    INFORMATION ONLY BILL - Indicates submission of bill is for informational purposes only. Examples would include a bill submitted as a utilization report, or a bill for a beneficiary who enrolled in a risk-based managed care plan and the hospital expects to receive payment from the plan.
    """

    C_05 = "05"
    """
    LIEN HAS BEEN FILED - Provider has filed legal claim for recovery of funds potentially due a patient resulting from legal action initiated by or on behalf of the patient.
    """

    C_06 = "06"
    """
    ESRD PATIENT IN FIRST 30 MONTHS OF ENTITLEMENT COVERED BY EMPLOYER GROUP HEALTH INSURANCE - Code indicates Medicare as the secondary insurer because the patient also is covered through an employer group health insurance during his first 30 months of End Stage Renal Disease (ESRD) entitlement.
    """

    C_07 = "07"
    """
    TREATMENT OF NON-TERMINAL CONDITION FOR HOSPICE PATIENT - Code indicates the patient is a hospice enrollee, but the provider is not treating his terminal condition and is therefore, requesting regular Medicare reimbursement.
    """

    C_08 = "08"
    """
    BENEFICIARY WOULD NOT PROVIDE INFORMATION CONCERNING OTHER INSURANCE COVERAGE - Enter this code if the beneficiary would not provide information concerning other insurance coverage.
    """

    C_09 = "09"
    """
    NEITHER PATIENT NOR SPOUSE IS EMPLOYED - Indicates that in response to development questions, the patient and spouse (if the patient is married) have denied any employment.
    """

    C_10 = "10"
    """
    PATIENT AND/OR SPOUSE IS EMPLOYED BUT NO EGHP EXISTS - Code indicates that in response to development questions, the patient and/or spouse have indicated that one is or both are employed but have no group health insurance from an EGHP or other employer sponsored or provided health insurance that covers the patient.
    """

    C_11 = "11"
    """
    DISABLED BENEFICIARY BUT NO LGHP - Code indicates that in response to development questions, the disabled beneficiary and/or family members have indicated that one is or more are employed but have no group health insurance from an LGHP or other employer sponsored or provided health insurance that covers the patient.
    """

    C_17 = "17"
    """
    PATIENT IS HOMELESS - The patient is homeless.
    """

    C_18 = "18"
    """
    MAIDEN NAME RETAINED - A dependent spouse entitled to benefits who does not use her husband's last name.
    """

    C_19 = "19"
    """
    CHILD RETAINS MOTHER'S NAME - A patient who is a dependent child entitled to benefits and does not have its father's last name.
    """

    C_20 = "20"
    """
    BENEFICIARY REQUESTED BILLING - Provider realizes services are non-covered level of care or excluded, but beneficiary requests determination by payer. (Currently limited to home health and inpatient SNF claims.)
    """

    C_21 = "21"
    """
    BILLING FOR DENIAL NOTICE - Provider realizes services are non-covered level of care or excluded, but requests notice from Medicare or other payer.
    """

    C_22 = "22"
    """
    PATIENT ON MULTIPLE DRUG REGIMEN - A patient who is receiving multiple intravenous drugs while on home IV therapy.
    """

    C_23 = "23"
    """
    HOME CARE GIVER AVAILABLE - The patient has a caregiver available to assist him or her during self-administration of an intravenous drug.
    """

    C_24 = "24"
    """
    HOME IV PATIENT ALSO RECEIVING HHA SERVICES - The patient is under the care of Home Health Agency while receiving home IV drug therapy services.
    """

    C_25 = "25"
    """
    PATIENT IS NON-U.S. RESIDENT - The patient is not a resident of the United States.
    """

    C_26 = "26"
    """
    VA ELIGIBLE PATIENT CHOOSES TO RECEIVE SERVICES IN A MEDICARE CERTIFIED FACILITY - Indicates that the patient is a VA eligible patient and chooses to receive services in a Medicare certified provider instead of a VA facility.
    """

    C_27 = "27"
    """
    PATIENT REFERRED TO A SOLE COMMUNITY HOSPITAL FOR A DIAGNOSTIC LABORATORY TEST - To be reported by Sole Community hospitals only. Report this code to indicate the patient was referred for a diagnostic laboratory test. Do not report this code when a specimen only is referred.
    """

    C_28 = "28"
    """
    PATIENT AND/OR SPOUSE’S EGHP IS SECONDARY TO MEDICARE - Code indicates that in response to development questions, the patient and/or spouse have indicated that one is or both are employed and that there is group health insurance from an EGHP or other employer sponsored or provided health insurance that covers the patient but that either: (1) the EGHP is a single employer plan and the employer has fewer than 20 full and part-time employees; or, (2) the EGHP is a multi or multiple employer plan that elects to pay secondary to Medicare for employees and spouses aged 65 and older for those participating employers who have fewer than 20 employees.
    """

    C_29 = "29"
    """
    DISABLED BENEFICIARY AND/OR FAMILY MEMBER’S LGHP IS SECONDARY TO MEDICARE - Code indicates that in response to development questions, the patient and/or family member(s) have indicated that one is or more are employed. There also is group health insurance coverage from a LGHP or other employer sponsored or provided health insurance that covers the patient. Generally, (1) the LGHP is a single employer plan and that the employer has fewer than 100 full and part-time employees; or, (2), the LGHP is a multiple employer plan and that all employers participating in the plan have fewer than 100 full and part-time employees.
    """

    C_30 = "30"
    """
    QUALIFYING CLINICAL TRIALS - Non-research services provided to patients enrolled in a Qualified Clinical Trial.
    """

    C_31 = "31"
    """
    PATIENT IS STUDENT (FULL TIME - DAY) - Patient declares that he or she is enrolled as a full time day student.
    """

    C_32 = "32"
    """
    PATIENT IS STUDENT (COOPERATIVE/ WORK STUDY PROGRAM) - Self-explanatory.
    """

    C_33 = "33"
    """
    PATIENT IS STUDENT (FULL TIME - NIGHT) - Patient declares that he or she is enrolled as a full time night student.
    """

    C_34 = "34"
    """
    PATIENT IS STUDENT (PART TIME) - Patient declares that he or she is enrolled as a part time student.
    """

    C_35 = "35"
    """
    PACE ELIGIBLE PATIENT DISENROLLS DURING AN INPATIENT ADMISSION - Indicates that the patient is a PACE eligible patient that has disenrolled from PACE during an inpatient admission.
    """

    C_36 = "36"
    """
    GENERAL CARE PATIENT IN A SPECIAL UNIT - Patient temporarily placed in special care unit bed because no general care beds available.
    """

    C_37 = "37"
    """
    WARD ACCOMMODATION AT PATIENT REQUEST - Patient assigned to ward accommodations at patient’s request.
    """

    C_38 = "38"
    """
    SEMI-PRIVATE ROOM NOT AVAILABLE - Indicates that either private or ward accommodations were assigned because semi- private accommodations were not available.
    """

    C_39 = "39"
    """
    PRIVATE ROOM MEDICALLY NECESSARY - Patient needs a private room for medical requirements.
    """

    C_40 = "40"
    """
    SAME DAY TRANSFER - Patient transferred to another facility before midnight on the day of admission.
    """

    C_41 = "41"
    """
    PARTIAL HOSPITALIZATION - Indicates claim is for partial hospitalization services.
    """

    C_42 = "42"
    """
    CONTINUING CARE NOT RELATED TO INPATIENT HOSPITALIZATION - Continuing care not related to the condition or diagnosis for which the individual received inpatient hospital services.
    """

    C_43 = "43"
    """
    CONTINUING CARE NOT PROVIDED WITHIN PRESCRIBED POST-DISCHARGE WINDOW - Continuing care related to the inpatient admission but the prescribed care was not provided within the post-discharge window.
    """

    C_44 = "44"
    """
    INPATIENT ADMISSION CHANGED TO OUTPATIENT - For use on outpatient claims only, when the physician ordered inpatient services, but upon internal utilization review performed before the claim was originally submitted, the hospital determined that the services did not meet its inpatient criteria. (Note: For Medicare, the change in patient status from inpatient to outpatient is made prior to discharge or release, while the beneficiary is still a patient of the hospital.)
    """

    C_45 = "45"
    """
    GENDER INCONGRUENCE - Characterized by a marked and persistent incongruence between an individual's experienced gender and the sex at birth.
    """

    C_46 = "46"
    """
    NON-AVAILABILITY STATEMENT ON FILE - A non-availability statement must be issued for each TRICARE claim for non-emergency inpatient care when the TRICARE beneficiary resides within the catchment’s area (usually a 40-mile radius) of a Uniformed Services Hospital.
    """

    C_47 = "47"
    """
    TRANSFER FROM ANOTHER HOME HEALTH AGENCY (EFFECTIVE 7/1/10) - The patient was admitted to this home health agency as a transfer from another home health agency.
    """

    C_48 = "48"
    """
    PSYCHIATRIC RESIDENTIAL TREATMENT CENTERS FOR CHILDREN AND ADOLESCENTS (RTCS) - Code to identify claims submitted by a “TRICARE - authorized” psychiatric Residential Treatment Center (RTC) for Children and Adolescents.
    """

    C_49 = "49"
    """
    PRODUCT REPLACEMENT WITHIN PRODUCT LIFECYCLE (EFFECTIVE 1/1/15) - Replacement of a product earlier than the anticipated lifecycle.
    """

    C_50 = "50"
    """
    PRODUCT REPLACEMENT FOR KNOWN RECALL OF A PRODUCT - Manufacturer or FDA has identified the product for recall and therefore replacement.
    """

    C_51 = "51"
    """
    ATTESTATION OF UNRELATED OUTPATIENT NONDIAGNOSTIC SERVICES (EFFECTIVE 4/1/11) - The hospital attests that the outpatient nondiagnostic service provided within 3 calendars days (1 calendar day for non-subsection (d) hospitals) prior to the admission is not related to the admission to the inpatient stay. For use on outpatient claims only.
    """

    C_52 = "52"
    """
    OUT OF HOSPICE SERVICE AREA (EFFECTIVE 7/1/12) - Code used when the patient is discharged for moving out of the hospice service area, including patients admitted to a hospital without contractual arrangements with the hospice.
    """

    C_53 = "53"
    """
    INITIAL PLACEMENT OF A MEDICAL DEVICE PROVIDED AS PART OF A CLINICAL TRIAL OR A FREE SAMPLE. (EFFECTIVE 7/1/15) - Code is for outpatient claims that have received a device credit upon initial medical device placement in a clinical trial or a free sample.
    """

    C_54 = "54"
    """
    NO SKILLED HOME HEALTH VISITS IN BILLING PERIOD. POLICY EXCEPTION DOCUMENTED AT THE HOME HEALTH AGENCY (EFFECTIVE 7/1/16) - Report when the Home Health claim is submitted without any skilled visits due to a circumstance that is allowed by the payer and indicate that the policy exception is documented at the Home Health Agency.
    """

    C_55 = "55"
    """
    SNF BED NOT AVAILABLE - Code indicates the patient’s SNF admission was delayed more than 30 days after hospital discharge because a SNF bed was not available.
    """

    C_56 = "56"
    """
    MEDICAL APPROPRIATENESS - Code indicates the patient’s SNF admission was delayed more than 30 days after hospital discharge because his condition made it inappropriate to begin active care within that period.
    """

    C_57 = "57"
    """
    SNF READMISSION - Code indicates the patient was previously receiving Medicare covered SNF care within 30 days of this readmission.
    """

    C_58 = "58"
    """
    TERMINATED MEDICARE ADVANTAGE ENROLLEE - Code indicates that patient is a terminated enrollee in a Medicare Advantage plan whose three-day inpatient hospital stay was waived.
    """

    C_59 = "59"
    """
    NON-PRIMARY ESRD FACILITY - Code indicates that ESRD beneficiary received non- scheduled or emergency dialysis services at a facility other than his/her primary ESRD dialysis facility.
    """

    C_60 = "60"
    """
    DAY OUTLIER - A hospital being paid under a prospective payment system is reporting this stay as a day outlier.
    """

    C_61 = "61"
    """
    COST OUTLIER - A hospital being paid under a prospective payment system is requesting additional payment for this stay as a cost outlier.
    """

    C_66 = "66"
    """
    PROVIDER DOES NOT WISH COST OUTLIER PAYMENT - A hospital paid under a prospective payment system is NOT requesting additional payment for this stay as a cost outlier.
    """

    C_67 = "67"
    """
    BENEFICIARY ELECTS NOT TO USE LIFE TIME RESERVE (LTR) DAYS - Indicates beneficiary elects not to use LTR days.
    """

    C_68 = "68"
    """
    BENEFICIARY ELECTS TO USE LIFE TIME RESERVE (LTR) DAYS - Indicates beneficiary has elected to use LTR days when charges are less than LTR co-insurance amounts.
    """

    C_69 = "69"
    """
    IME/DGME/N&AH PAYMENT ONLY - Code indicates a request for a supplemental payment for IME/DGME/N&AH (Indirect Medical Education/Graduate Medical Education/ Nursing and Allied Health).
    """

    C_70 = "70"
    """
    SELF-ADMINISTERED ANEMIA MANAGEMENT DRUG - Code indicates the billing is for a home dialysis patient who self administers an anemia management drug, such as erythropoietin alpha (EPO) or darbepoetin alpha.
    """

    C_71 = "71"
    """
    FULL CARE IN UNIT - Code indicates the billing is for a patient who received staff-assisted dialysis services in a hospital or renal dialysis facility.
    """

    C_72 = "72"
    """
    SELF CARE IN UNIT - Code indicates the billing is for a patient who managed his own dialysis services without staff assistance in a hospital or renal dialysis facility.
    """

    C_73 = "73"
    """
    ESRD SELF CARE TRAINING - Code indicates the billing is for special dialysis services training when a patient or caregiver is learning to perform dialysis.
    """

    C_74 = "74"
    """
    HOME - Code indicates the billing is for a patient who received dialysis services at home, but where code 75 below does not apply.
    """

    C_75 = "75"
    """
    HOME - 100 PERCENT REIMBURSEMENT - Code indicates the billing is for a patient who received dialysis services at home, using a dialysis machine that was purchased by Medicare under the 100 percent program.
    """

    C_76 = "76"
    """
    BACK-UP IN FACILITY DIALYSIS - Code indicates the billing is for a home dialysis patient who received back-up dialysis in a facility.
    """

    C_77 = "77"
    """
    PROVIDER ACCEPTS OR IS OBLIGATED/REQUIRED DUE TO A CONTRACTUAL ARRANGEMENT OR LAW TO ACCEPT PAYMENT BY A PRIMARY PAYER AS PAYMENT IN FULL. - Code indicates you have accepted or are
    obligated/required due to a contractual
    arrangement or law to accept payment as
    payment in full. Therefore, no payment is due.
    """

    C_78 = "78"
    """
    NEW COVERAGE NOT IMPLEMENTED BY MANAGED CARE PLAN - Billing is for a newly covered service for which
    the managed care plan/HMO does not pay. (Note:
    For outpatient bills Condition Code 04 should be
    omitted).
    """

    C_79 = "79"
    """
    CORF SERVICES PROVIDED OFFSITE - Enter this code to indicate that physical therapy,
    occupational therapy, or speech pathology ser-
    vices were provided offsite.
    """

    C_80 = "80"
    """
    HOME DIALYSIS - NURSING FACILITY - Home dialysis furnished in a SNF or nursing facility.
    """

    C_81 = "81"
    """
    C-SECTIONS/INDUCTIONS < 39 WEEKS - MEDICAL NECESSITY - C-sections or inductions performed at less than 39 weeks gestation for medical necessity.
    """

    C_82 = "82"
    """
    C-SECTIONS/INDUCTIONS < 39 WEEKS - ELECTIVE - C-sections or inductions performed at less than 39 weeks gestation electively.
    """

    C_83 = "83"
    """
    C-SECTIONS/INDUCTIONS 39 WEEKS OR GREATER - C-sections or inductions performed at 39 weeks gestation or greater.
    """

    C_84 = "84"
    """
    DIALYSIS FOR ACUTE KIDNEY INJURY (AKI) (EFFECTIVE 1/1/17) - Dialysis facilities (Type of Bill 072x) enter this code to indicate that the billing is for a patient with AKI. (Not to be used for patients with End Stage Renal Disease)
    """

    C_85 = "85"
    """
    DELAYED RECERTIFICATION OF HOSPICE TERMINAL ILLNESS (EFFECTIVE 1/1/17) - Used when hospice recertification is untimely.
    """

    C_86 = "86"
    """
    ADDITIONAL HEMODIALYSIS TREATMENTS WITH MEDICAL JUSTIFICATION (ORIGINAL EFFECTIVE DATE DELAYED. NEW EFFECTIVE DATE TBD*) - Enter this code to indicate that the billing is for a patient receiving hemodialysis who exhibits a medical condition that necessitates hemodialysis at a frequency greater than the patient’s plan of care and all treatments on the claim are reasonable and necessary.
    """

    C_87 = "87"
    """
    ESRD SELF CARE RETRAINING (EFFECTIVE 7/1/17) - Code indicates the billing is for special dialysis services retraining where the patient or caregiver has previously completed dialysis training.
    """

    C_88 = "88"
    """
    ALLOGENEIC STEM CELL TRANSPLANT RELATED DONOR CHARGES (EFFECTIVE 7/1/20) - Claim submitted is solely for separately billed charges for evaluating related stem cell transplant donor candidates prior to the actual transplant claim.
    """

    C_89 = "89"
    """
    OPIOID TREATMENT PROGRAM (EFFECTIVE 1/1/21) - Indicates claim is for opioid treatment program services.
    """

    C_90 = "90"
    """
    EXPANDED ACCESS APPROVAL (EFFECTIVE 2/1/21) - Service provided as part of an Expanded Access approval.
    """

    C_91 = "91"
    """
    EMERGENCY USE AUTHORIZATION (EFFECTIVE 2/1/21) - Service provided as part of an Emergency Use Authorization.
    """

    C_92 = "92"
    """
    INTENSIVE OUTPATIENT PROGRAM (IOP) (EFFECTIVE FOR SERVICES FURNISHED ON OR AFTER 1/1/2024) - Code indicates claim is for Intensive Outpatient Services
    """

    CA_0 = "A0"
    """
    TRICARE EXTERNAL PARTNERSHIP PROGRAM - This code identifies TRICARE claims submitted under the External Partnership Program.
    """

    CA_1 = "A1"
    """
    BIRTH DATE - INSURED A - The birth date of the individual in whose name the insurance is carried.
    """

    CA_2 = "A2"
    """
    PHYSICALLY HANDICAPPED CHILDREN’S PROGRAM - Services provided under this program receive special funding through Title VII of the Social Security Act or the TRICARE program for the Handicapped.
    """

    CA_3 = "A3"
    """
    SPECIAL FEDERAL FUNDING - This code has been designed for uniform use as defined by state law.
    """

    CA_4 = "A4"
    """
    FAMILY PLANNING - This code has been designed for uniform use as defined by state law.
    """

    CA_5 = "A5"
    """
    DISABILITY - This code has been designed for uniform use as defined by state law.
    """

    CA_6 = "A6"
    """
    VACCINES/MEDICARE 100% PAYMENT - This code identifies that pneumococcal pneumonia and influenza vaccine services are reimbursed under special Medicare program provisions and Medicare deductible and coinsurance requirements do not apply.
    """

    CA_7 = "A7"
    """
    HOSPITAL SERVICES PROVIDED IN A MOBILE FACILITY OR WITH PORTABLE UNITS (EFFECTIVE 4/1/20). - Code indicates that hospital services were provided in a mobile facility or with portable units.
    """

    CA_9 = "A9"
    """
    SECOND OPINION SURGERY - Services requested to support second opinion on surgery.
    """

    CAA = "AA"
    """
    ABORTION PERFORMED DUE TO RAPE - Code indicates abortion performed due to a rape.
    """

    CAB = "AB"
    """
    ABORTION PERFORMED DUE TO INCEST - Code indicates abortion performed due to an incident of incest.
    """

    CAC = "AC"
    """
    ABORTION PERFORMED DUE TO SERIOUS FETAL GENETIC DEFECT, DEFORMITY, OR ABNORMALITY - Code indicates abortion performed due to a genetic defect, a deformity, or abnormality to the fetus.
    """

    CAD = "AD"
    """
    ABORTION PERFORMED DUE TO A LIFE ENDANGERING PHYSICAL CONDITION - Abortion performed due to a life endangering physical condition caused by, or, arising from or exacerbated by the pregnancy itself.
    """

    CAE = "AE"
    """
    ABORTION PERFORMED DUE TO PHYSICAL HEALTH OF MOTHER THAT IS NOT LIFE ENDANGERING - Abortion performed due to physical health of mother that is not life endangering.
    """

    CAF = "AF"
    """
    ABORTION PERFORMED DUE TO EMOTIONAL/PSYCHOLOGICAL HEALTH OF THE MOTHER - Abortion performed due to emotional psychological health of the mother.
    """

    CAG = "AG"
    """
    ABORTION PERFORMED DUE TO SOCIAL OR ECONOMIC REASONS - Abortion performed due to social or economic reasons.
    """

    CAH = "AH"
    """
    ELECTIVE ABORTION - Elective abortion.
    """

    CAI = "AI"
    """
    STERILIZATION - Sterilization.
    """

    CAJ = "AJ"
    """
    PAYER RESPONSIBLE FOR CO-PAYMENT - Payer responsible for co-payment.
    """

    CAK = "AK"
    """
    AIR AMBULANCE REQUIRED - For ambulance claims. Air ambulance required; time needed to transport poses a threat.
    """

    CAL = "AL"
    """
    SPECIALIZED TREATMENT/BED UNAVAILABLE - ALTERNATE FACILITY TRANSPORT - For ambulance claims. Specialized treatment bed unavailable. Transport to alternate facility.
    """

    CAM = "AM"
    """
    NON-EMERGENCY MEDICALLY NECESSARY STRETCHER TRANSPORT REQUIRED - For ambulance claims. Non-emergency medically necessary stretcher transport required.
    """

    CAN = "AN"
    """
    PREADMISSION SCREENING NOT REQUIRED - Person meets the criteria for an exemption from preadmission screening.
    """

    CB_0 = "B0"
    """
    MEDICARE COORDINATED CARE DEMONSTRATION CLAIM - Patient is participant in the Medicare Coordinated Care Demonstration.
    """

    CB_1 = "B1"
    """
    BENEFICIARY IS INELIGIBLE FOR DEMONSTRATION PROGRAM - Beneficiary is ineligible for demonstration program.
    """

    CB_2 = "B2"
    """
    CRITICAL ACCESS HOSPITAL AMBULANCE ATTESTATION - Attestation by Critical Access Hospital that it meets the criteria for exemption from the ambulance fee schedule.
    """

    CB_3 = "B3"
    """
    PREGNANCY INDICATOR - Indicates patient is pregnant. Required when mandated by law; determination of pregnancy completed in compliance with applicable law.
    """

    CB_4 = "B4"
    """
    ADMISSION UNRELATED TO DISCHARGE ON SAME DAY - Report code when a patient is discharged/transferred from an acute care PPS hospital on the same day for symptoms unrelated to and/or not for evaluation and management of, the prior stay’s medical condition.
    """

    CBP = "BP"
    """
    GULF OIL SPILL OF 2010 (EFFECTIVE 4/20/10) - This code identifies claims where the provision of all services on the claim are related, in whole or in part, to an illness, injury, or condition that was caused by or exacerbated by the effects, direct or indirect, of the 2010 oil spill in the Gulf of Mexico and/or circumstances related to such spill, including but not limited to subsequent clean-up activities.
    """

    CC_1 = "C1"
    """
    APPROVED AS BILLED - The services provided for this billing period have been reviewed by the QIO or intermediary, as appropriate, and are fully approved including any day or cost outlier.
    """

    CC_2 = "C2"
    """
    AUTOMATIC APPROVAL AS BILLED BASED ON FOCUSED REVIEW - This should include only categories of cases that the QIO has determined it need not review under a focused review program. (No longer used for Medicare.)
    """

    CC_3 = "C3"
    """
    PARTIAL APPROVAL - The services provided for this billing period have been reviewed by the QIO or intermediary, as appropriate, and some portion has been denied (days, or services).
    """

    CC_4 = "C4"
    """
    ADMISSION/SERVICES DENIED - This should only be used to indicate that all of the services were denied by the QIO.
    """

    CC_5 = "C5"
    """
    POST PAYMENT REVIEW APPLICABLE - This should be used indicated that the QIO review will take place after payment.
    """

    CC_6 = "C6"
    """
    ADMISSION PREAUTHORIZATION - The QIO authorized this admission/service but has not reviewed the services provided.
    """

    CC_7 = "C7"
    """
    EXTENDED AUTHORIZATION - The QIO has authorized these services for an extended length of time but has not reviewed the services provided.
    """

    CD_0 = "D0"
    """
    CHANGES TO SERVICE DATES - Changes to service dates.
    """

    CD_1 = "D1"
    """
    CHANGES TO CHARGES - Changes to charges.
    """

    CD_2 = "D2"
    """
    CHANGES IN REVENUE CODES/HCPCS/HIPPS RATE CODES - Report this claim change reason code on a replacement claim (Bill Type Frequency Code 7) to reflect a change in Revenue Codes (FL42) HCPCS/HIPPS Rate Codes (FL44).
    """

    CD_3 = "D3"
    """
    SECOND OR SUBSEQUENT INTERIM PPS BILL - Second or subsequent Interim PPS bill.
    """

    CD_4 = "D4"
    """
    CHANGE IN CLINICAL CODES (ICD) FOR DIAGNOSIS AND/OR PROCEDURE CODES - Report this claim change reason code on a replacement claim (Bill Type Frequency Code 7) to reflect a change in diagnosis (FL67) and procedure codes (FL74).
    """

    CD_5 = "D5"
    """
    CANCEL TO CORRECT INSURED’S ID OR PROVIDER ID - Cancel only to correct insured’s ID or provider identification number.
    """

    CD_6 = "D6"
    """
    CANCEL ONLY TO REPAY A DUPLICATE OR OIG OVERPAYMENT - Cancel only to repay a duplicate payment or OIG overpayment. (Includes cancellation of an
    outpatient bill containing services required to be included on the inpatient bill.)
    """

    CD_7 = "D7"
    """
    CHANGE TO MAKE MEDICARE THE SECONDARY PAYER - Change to make Medicare the secondary payer.
    """

    CD_8 = "D8"
    """
    CHANGE TO MAKE MEDICARE THE PRIMARY PAYER - Change to make Medicare the primary payer.
    """

    CD_9 = "D9"
    """
    ANY OTHER CHANGE - Any other change.
    """

    CD_RA = "DR(a)"
    """
    DISASTER RELATED - Used to identify claims that are or may be impacted by specific payer/health plan policies related to a national or regional disaster.
    """

    CE_0 = "E0"
    """
    CHANGE IN PATIENT STATUS - Change in patient status.
    """

    CG_0 = "G0"
    """
    DISTINCT MEDICAL VISIT - Report this code when multiple medical visits occurred on the same day in the same revenue center but the visits were distinct and constituted independent visits. An example of such a situation would be a beneficiary going to the emergency room twice on the same day, in the morning for a broken arm and later for chest pain.
    """

    CH_0 = "H0"
    """
    DELAYED FILING; STATEMENT OF INTENT SUBMITTED - Code indicates submission of “Statement of Intent” within the qualifying period to specifically identify the existence of another third party liability situation.
    """

    CH_2 = "H2"
    """
    DISCHARGE BY A HOSPICE PROVIDER FOR CAUSE (EFFECTIVE 1/1/09) - Discharge by a hospice provider for cause.
    """

    CH_3 = "H3"
    """
    REOCCURRENCE OF GI BLEED COMORBID CATEGORY (EFFECTIVE 1/1/11) - Code indicates a reoccurrence of GI bleed comorbid category limited for use in conjunction with ESRD PPS and applicable to 072x types of bill only.
    """

    CH_4 = "H4"
    """
    REOCCURRENCE OF PNEUMONIA COMORBID CATEGORY (EFFECTIVE 1/1/11) - Code indicates a reoccurrence of pneumonia comorbid category limited for use in conjunction with ESRD PPS and applicable to 072x types of bill only.
    """

    CH_5 = "H5"
    """
    REOCCURRENCE OF PERICARDITIS COMORBID CATEGORY (EFFECTIVE 1/1/11) - Code indicates a reoccurrence of pericarditis comorbid category limited for use in conjunction with ESRD PPS and applicable to 072x types of bill only.
    """

    CP_1 = "P1"
    """
    DO NOT RESUSCITATE ORDER (DNR) - FOR PUBLIC HEALTH DATA REPORTING ONLY when required by state or federal law or regulations. Code indicates that a DNR order was written at the time of or within the first 24 hours of the patient’s admission to the hospital and is clearly documented in the patient’s medical record.
    """

    CP_7 = "P7"
    """
    DIRECT INPATIENT ADMISSION FROM EMERGENCY ROOM (EFFECTIVE 7/1/10) - FOR PUBLIC HEALTH DATA REPORTING ONLY when required by state or federal law or regulations. Code indicates that patient was admitted directly from this facility’s Emergency Room/Department.
    """

    CR_1 = "R1"
    """
    REQUEST FOR REOPENING REASON CODE - MATHEMATICAL OR COMPUTATIONAL MISTAKES (EFFECTIVE 1/1/16) - Mathematical or computational mistakes.
    """

    CR_2 = "R2"
    """
    REQUEST FOR REOPENING REASON CODE - INACCURATE DATA ENTRY (EFFECTIVE 1/1/16) - Inaccurate data entry, e.g., miskeyed or transposed provider number, referring NPI, date of service, procedure code, etc.
    """

    CR_3 = "R3"
    """
    REQUEST FOR REOPENING REASON CODE - MISAPPLICATION OF A FEE SCHEDULE (EFFECTIVE 1/1/16) - Misapplication of a fee schedule.
    """

    CR_4 = "R4"
    """
    REQUEST FOR REOPENING REASON CODE - COMPUTER ERRORS (EFFECTIVE 1/1/16) - Computer errors.
    """

    CR_5 = "R5"
    """
    REQUEST FOR REOPENING REASON CODE - INCORRECTLY IDENTIFIED DUPLICATE CLAIM (EFFECTIVE 1/1/16) - Claims denied as duplicates which the party believes were incorrectly identified as a duplicate.
    """

    CR_6 = "R6"
    """
    REQUEST FOR REOPENING REASON CODE - OTHER CLERICAL ERRORS OR MINOR ERRORS AND OMISSIONS NOT SPECIFIED IN R1-R5 ABOVE (EFFECTIVE 1/1/16) - Other clerical errors or minor errors and omissions not specified in R1-R5 above.
    """

    CR_7 = "R7"
    """
    REQUEST FOR REOPENING REASON CODE - CORRECTIONS OTHER THAN CLERICAL ERRORS (EFFECTIVE 1/1/16) - Claim corrections other than clerical errors within one year of the date of initial determination.
    """

    CR_8 = "R8"
    """
    REQUEST FOR REOPENING REASON CODE - NEW AND MATERIAL EVIDENCE (EFFECTIVE 1/1/16) - A reopening for good cause (one to four years from the date of the initial determination) due to new and material evidence that was not available or known at the time of the determination or decision and may result in a different conclusion.
    """

    CR_9 = "R9"
    """
    REQUEST FOR REOPENING REASON CODE - FAULTY EVIDENCE (EFFECTIVE 1/1/16) - A reopening for good cause (one to four years from the date of the initial determination) because the evidence that was considered in making the determination or decision clearly shows that an obvious error was made at the time of the determination or decision.
    """

    CW_0 = "W0"
    """
    UNITED MINE WORKERS OF AMERICA (UMWA) DEMONSTRATION INDICATOR - Used for United Mine Workers of America (UMWA) demonstration indicator ONLY.
    """

    CW_2 = "W2"
    """
    DUPLICATE OF ORIGINAL BILL (EFFECTIVE 10/1/08) - Code indicates bill is exact duplicate of the original bill submitted.
    """

    CW_3 = "W3"
    """
    LEVEL I APPEAL (EFFECTIVE 10/1/08) - Code indicates bill is submitted for reconsideration; the level of appeal / reconsideration (I) is specified/defined by the payer.
    """

    CW_4 = "W4"
    """
    LEVEL II APPEAL (EFFECTIVE 10/1/08) - Code indicates bill is submitted for reconsideration; the level of appeal / reconsideration (II) is specified/defined by the payer.
    """

    CW_5 = "W5"
    """
    LEVEL III APPEAL (EFFECTIVE 10/1/08) - Code indicates bill is submitted for reconsideration; the level of appeal / reconsideration (II) is specified/defined by the payer.
    """

    _UNKNOWN = "__CONDITIONCODE_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "ConditionCode":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        c_01: typing.Callable[[], T_Result],
        c_02: typing.Callable[[], T_Result],
        c_03: typing.Callable[[], T_Result],
        c_04: typing.Callable[[], T_Result],
        c_05: typing.Callable[[], T_Result],
        c_06: typing.Callable[[], T_Result],
        c_07: typing.Callable[[], T_Result],
        c_08: typing.Callable[[], T_Result],
        c_09: typing.Callable[[], T_Result],
        c_10: typing.Callable[[], T_Result],
        c_11: typing.Callable[[], T_Result],
        c_17: typing.Callable[[], T_Result],
        c_18: typing.Callable[[], T_Result],
        c_19: typing.Callable[[], T_Result],
        c_20: typing.Callable[[], T_Result],
        c_21: typing.Callable[[], T_Result],
        c_22: typing.Callable[[], T_Result],
        c_23: typing.Callable[[], T_Result],
        c_24: typing.Callable[[], T_Result],
        c_25: typing.Callable[[], T_Result],
        c_26: typing.Callable[[], T_Result],
        c_27: typing.Callable[[], T_Result],
        c_28: typing.Callable[[], T_Result],
        c_29: typing.Callable[[], T_Result],
        c_30: typing.Callable[[], T_Result],
        c_31: typing.Callable[[], T_Result],
        c_32: typing.Callable[[], T_Result],
        c_33: typing.Callable[[], T_Result],
        c_34: typing.Callable[[], T_Result],
        c_35: typing.Callable[[], T_Result],
        c_36: typing.Callable[[], T_Result],
        c_37: typing.Callable[[], T_Result],
        c_38: typing.Callable[[], T_Result],
        c_39: typing.Callable[[], T_Result],
        c_40: typing.Callable[[], T_Result],
        c_41: typing.Callable[[], T_Result],
        c_42: typing.Callable[[], T_Result],
        c_43: typing.Callable[[], T_Result],
        c_44: typing.Callable[[], T_Result],
        c_45: typing.Callable[[], T_Result],
        c_46: typing.Callable[[], T_Result],
        c_47: typing.Callable[[], T_Result],
        c_48: typing.Callable[[], T_Result],
        c_49: typing.Callable[[], T_Result],
        c_50: typing.Callable[[], T_Result],
        c_51: typing.Callable[[], T_Result],
        c_52: typing.Callable[[], T_Result],
        c_53: typing.Callable[[], T_Result],
        c_54: typing.Callable[[], T_Result],
        c_55: typing.Callable[[], T_Result],
        c_56: typing.Callable[[], T_Result],
        c_57: typing.Callable[[], T_Result],
        c_58: typing.Callable[[], T_Result],
        c_59: typing.Callable[[], T_Result],
        c_60: typing.Callable[[], T_Result],
        c_61: typing.Callable[[], T_Result],
        c_66: typing.Callable[[], T_Result],
        c_67: typing.Callable[[], T_Result],
        c_68: typing.Callable[[], T_Result],
        c_69: typing.Callable[[], T_Result],
        c_70: typing.Callable[[], T_Result],
        c_71: typing.Callable[[], T_Result],
        c_72: typing.Callable[[], T_Result],
        c_73: typing.Callable[[], T_Result],
        c_74: typing.Callable[[], T_Result],
        c_75: typing.Callable[[], T_Result],
        c_76: typing.Callable[[], T_Result],
        c_77: typing.Callable[[], T_Result],
        c_78: typing.Callable[[], T_Result],
        c_79: typing.Callable[[], T_Result],
        c_80: typing.Callable[[], T_Result],
        c_81: typing.Callable[[], T_Result],
        c_82: typing.Callable[[], T_Result],
        c_83: typing.Callable[[], T_Result],
        c_84: typing.Callable[[], T_Result],
        c_85: typing.Callable[[], T_Result],
        c_86: typing.Callable[[], T_Result],
        c_87: typing.Callable[[], T_Result],
        c_88: typing.Callable[[], T_Result],
        c_89: typing.Callable[[], T_Result],
        c_90: typing.Callable[[], T_Result],
        c_91: typing.Callable[[], T_Result],
        c_92: typing.Callable[[], T_Result],
        ca_0: typing.Callable[[], T_Result],
        ca_1: typing.Callable[[], T_Result],
        ca_2: typing.Callable[[], T_Result],
        ca_3: typing.Callable[[], T_Result],
        ca_4: typing.Callable[[], T_Result],
        ca_5: typing.Callable[[], T_Result],
        ca_6: typing.Callable[[], T_Result],
        ca_7: typing.Callable[[], T_Result],
        ca_9: typing.Callable[[], T_Result],
        caa: typing.Callable[[], T_Result],
        cab: typing.Callable[[], T_Result],
        cac: typing.Callable[[], T_Result],
        cad: typing.Callable[[], T_Result],
        cae: typing.Callable[[], T_Result],
        caf: typing.Callable[[], T_Result],
        cag: typing.Callable[[], T_Result],
        cah: typing.Callable[[], T_Result],
        cai: typing.Callable[[], T_Result],
        caj: typing.Callable[[], T_Result],
        cak: typing.Callable[[], T_Result],
        cal: typing.Callable[[], T_Result],
        cam: typing.Callable[[], T_Result],
        can: typing.Callable[[], T_Result],
        cb_0: typing.Callable[[], T_Result],
        cb_1: typing.Callable[[], T_Result],
        cb_2: typing.Callable[[], T_Result],
        cb_3: typing.Callable[[], T_Result],
        cb_4: typing.Callable[[], T_Result],
        cbp: typing.Callable[[], T_Result],
        cc_1: typing.Callable[[], T_Result],
        cc_2: typing.Callable[[], T_Result],
        cc_3: typing.Callable[[], T_Result],
        cc_4: typing.Callable[[], T_Result],
        cc_5: typing.Callable[[], T_Result],
        cc_6: typing.Callable[[], T_Result],
        cc_7: typing.Callable[[], T_Result],
        cd_0: typing.Callable[[], T_Result],
        cd_1: typing.Callable[[], T_Result],
        cd_2: typing.Callable[[], T_Result],
        cd_3: typing.Callable[[], T_Result],
        cd_4: typing.Callable[[], T_Result],
        cd_5: typing.Callable[[], T_Result],
        cd_6: typing.Callable[[], T_Result],
        cd_7: typing.Callable[[], T_Result],
        cd_8: typing.Callable[[], T_Result],
        cd_9: typing.Callable[[], T_Result],
        cd_ra: typing.Callable[[], T_Result],
        ce_0: typing.Callable[[], T_Result],
        cg_0: typing.Callable[[], T_Result],
        ch_0: typing.Callable[[], T_Result],
        ch_2: typing.Callable[[], T_Result],
        ch_3: typing.Callable[[], T_Result],
        ch_4: typing.Callable[[], T_Result],
        ch_5: typing.Callable[[], T_Result],
        cp_1: typing.Callable[[], T_Result],
        cp_7: typing.Callable[[], T_Result],
        cr_1: typing.Callable[[], T_Result],
        cr_2: typing.Callable[[], T_Result],
        cr_3: typing.Callable[[], T_Result],
        cr_4: typing.Callable[[], T_Result],
        cr_5: typing.Callable[[], T_Result],
        cr_6: typing.Callable[[], T_Result],
        cr_7: typing.Callable[[], T_Result],
        cr_8: typing.Callable[[], T_Result],
        cr_9: typing.Callable[[], T_Result],
        cw_0: typing.Callable[[], T_Result],
        cw_2: typing.Callable[[], T_Result],
        cw_3: typing.Callable[[], T_Result],
        cw_4: typing.Callable[[], T_Result],
        cw_5: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is ConditionCode.C_01:
            return c_01()
        if self is ConditionCode.C_02:
            return c_02()
        if self is ConditionCode.C_03:
            return c_03()
        if self is ConditionCode.C_04:
            return c_04()
        if self is ConditionCode.C_05:
            return c_05()
        if self is ConditionCode.C_06:
            return c_06()
        if self is ConditionCode.C_07:
            return c_07()
        if self is ConditionCode.C_08:
            return c_08()
        if self is ConditionCode.C_09:
            return c_09()
        if self is ConditionCode.C_10:
            return c_10()
        if self is ConditionCode.C_11:
            return c_11()
        if self is ConditionCode.C_17:
            return c_17()
        if self is ConditionCode.C_18:
            return c_18()
        if self is ConditionCode.C_19:
            return c_19()
        if self is ConditionCode.C_20:
            return c_20()
        if self is ConditionCode.C_21:
            return c_21()
        if self is ConditionCode.C_22:
            return c_22()
        if self is ConditionCode.C_23:
            return c_23()
        if self is ConditionCode.C_24:
            return c_24()
        if self is ConditionCode.C_25:
            return c_25()
        if self is ConditionCode.C_26:
            return c_26()
        if self is ConditionCode.C_27:
            return c_27()
        if self is ConditionCode.C_28:
            return c_28()
        if self is ConditionCode.C_29:
            return c_29()
        if self is ConditionCode.C_30:
            return c_30()
        if self is ConditionCode.C_31:
            return c_31()
        if self is ConditionCode.C_32:
            return c_32()
        if self is ConditionCode.C_33:
            return c_33()
        if self is ConditionCode.C_34:
            return c_34()
        if self is ConditionCode.C_35:
            return c_35()
        if self is ConditionCode.C_36:
            return c_36()
        if self is ConditionCode.C_37:
            return c_37()
        if self is ConditionCode.C_38:
            return c_38()
        if self is ConditionCode.C_39:
            return c_39()
        if self is ConditionCode.C_40:
            return c_40()
        if self is ConditionCode.C_41:
            return c_41()
        if self is ConditionCode.C_42:
            return c_42()
        if self is ConditionCode.C_43:
            return c_43()
        if self is ConditionCode.C_44:
            return c_44()
        if self is ConditionCode.C_45:
            return c_45()
        if self is ConditionCode.C_46:
            return c_46()
        if self is ConditionCode.C_47:
            return c_47()
        if self is ConditionCode.C_48:
            return c_48()
        if self is ConditionCode.C_49:
            return c_49()
        if self is ConditionCode.C_50:
            return c_50()
        if self is ConditionCode.C_51:
            return c_51()
        if self is ConditionCode.C_52:
            return c_52()
        if self is ConditionCode.C_53:
            return c_53()
        if self is ConditionCode.C_54:
            return c_54()
        if self is ConditionCode.C_55:
            return c_55()
        if self is ConditionCode.C_56:
            return c_56()
        if self is ConditionCode.C_57:
            return c_57()
        if self is ConditionCode.C_58:
            return c_58()
        if self is ConditionCode.C_59:
            return c_59()
        if self is ConditionCode.C_60:
            return c_60()
        if self is ConditionCode.C_61:
            return c_61()
        if self is ConditionCode.C_66:
            return c_66()
        if self is ConditionCode.C_67:
            return c_67()
        if self is ConditionCode.C_68:
            return c_68()
        if self is ConditionCode.C_69:
            return c_69()
        if self is ConditionCode.C_70:
            return c_70()
        if self is ConditionCode.C_71:
            return c_71()
        if self is ConditionCode.C_72:
            return c_72()
        if self is ConditionCode.C_73:
            return c_73()
        if self is ConditionCode.C_74:
            return c_74()
        if self is ConditionCode.C_75:
            return c_75()
        if self is ConditionCode.C_76:
            return c_76()
        if self is ConditionCode.C_77:
            return c_77()
        if self is ConditionCode.C_78:
            return c_78()
        if self is ConditionCode.C_79:
            return c_79()
        if self is ConditionCode.C_80:
            return c_80()
        if self is ConditionCode.C_81:
            return c_81()
        if self is ConditionCode.C_82:
            return c_82()
        if self is ConditionCode.C_83:
            return c_83()
        if self is ConditionCode.C_84:
            return c_84()
        if self is ConditionCode.C_85:
            return c_85()
        if self is ConditionCode.C_86:
            return c_86()
        if self is ConditionCode.C_87:
            return c_87()
        if self is ConditionCode.C_88:
            return c_88()
        if self is ConditionCode.C_89:
            return c_89()
        if self is ConditionCode.C_90:
            return c_90()
        if self is ConditionCode.C_91:
            return c_91()
        if self is ConditionCode.C_92:
            return c_92()
        if self is ConditionCode.CA_0:
            return ca_0()
        if self is ConditionCode.CA_1:
            return ca_1()
        if self is ConditionCode.CA_2:
            return ca_2()
        if self is ConditionCode.CA_3:
            return ca_3()
        if self is ConditionCode.CA_4:
            return ca_4()
        if self is ConditionCode.CA_5:
            return ca_5()
        if self is ConditionCode.CA_6:
            return ca_6()
        if self is ConditionCode.CA_7:
            return ca_7()
        if self is ConditionCode.CA_9:
            return ca_9()
        if self is ConditionCode.CAA:
            return caa()
        if self is ConditionCode.CAB:
            return cab()
        if self is ConditionCode.CAC:
            return cac()
        if self is ConditionCode.CAD:
            return cad()
        if self is ConditionCode.CAE:
            return cae()
        if self is ConditionCode.CAF:
            return caf()
        if self is ConditionCode.CAG:
            return cag()
        if self is ConditionCode.CAH:
            return cah()
        if self is ConditionCode.CAI:
            return cai()
        if self is ConditionCode.CAJ:
            return caj()
        if self is ConditionCode.CAK:
            return cak()
        if self is ConditionCode.CAL:
            return cal()
        if self is ConditionCode.CAM:
            return cam()
        if self is ConditionCode.CAN:
            return can()
        if self is ConditionCode.CB_0:
            return cb_0()
        if self is ConditionCode.CB_1:
            return cb_1()
        if self is ConditionCode.CB_2:
            return cb_2()
        if self is ConditionCode.CB_3:
            return cb_3()
        if self is ConditionCode.CB_4:
            return cb_4()
        if self is ConditionCode.CBP:
            return cbp()
        if self is ConditionCode.CC_1:
            return cc_1()
        if self is ConditionCode.CC_2:
            return cc_2()
        if self is ConditionCode.CC_3:
            return cc_3()
        if self is ConditionCode.CC_4:
            return cc_4()
        if self is ConditionCode.CC_5:
            return cc_5()
        if self is ConditionCode.CC_6:
            return cc_6()
        if self is ConditionCode.CC_7:
            return cc_7()
        if self is ConditionCode.CD_0:
            return cd_0()
        if self is ConditionCode.CD_1:
            return cd_1()
        if self is ConditionCode.CD_2:
            return cd_2()
        if self is ConditionCode.CD_3:
            return cd_3()
        if self is ConditionCode.CD_4:
            return cd_4()
        if self is ConditionCode.CD_5:
            return cd_5()
        if self is ConditionCode.CD_6:
            return cd_6()
        if self is ConditionCode.CD_7:
            return cd_7()
        if self is ConditionCode.CD_8:
            return cd_8()
        if self is ConditionCode.CD_9:
            return cd_9()
        if self is ConditionCode.CD_RA:
            return cd_ra()
        if self is ConditionCode.CE_0:
            return ce_0()
        if self is ConditionCode.CG_0:
            return cg_0()
        if self is ConditionCode.CH_0:
            return ch_0()
        if self is ConditionCode.CH_2:
            return ch_2()
        if self is ConditionCode.CH_3:
            return ch_3()
        if self is ConditionCode.CH_4:
            return ch_4()
        if self is ConditionCode.CH_5:
            return ch_5()
        if self is ConditionCode.CP_1:
            return cp_1()
        if self is ConditionCode.CP_7:
            return cp_7()
        if self is ConditionCode.CR_1:
            return cr_1()
        if self is ConditionCode.CR_2:
            return cr_2()
        if self is ConditionCode.CR_3:
            return cr_3()
        if self is ConditionCode.CR_4:
            return cr_4()
        if self is ConditionCode.CR_5:
            return cr_5()
        if self is ConditionCode.CR_6:
            return cr_6()
        if self is ConditionCode.CR_7:
            return cr_7()
        if self is ConditionCode.CR_8:
            return cr_8()
        if self is ConditionCode.CR_9:
            return cr_9()
        if self is ConditionCode.CW_0:
            return cw_0()
        if self is ConditionCode.CW_2:
            return cw_2()
        if self is ConditionCode.CW_3:
            return cw_3()
        if self is ConditionCode.CW_4:
            return cw_4()
        if self is ConditionCode.CW_5:
            return cw_5()
        return _unknown_member(self._value_)
