# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class ConditionCode(str, enum.Enum):
    C_01 = "01"
    """
    MILITARY SERVICE RELATED - Medical condition incurred during military service.
    """

    C_02 = "02"
    """
    CONDITION IS EMPLOYMENT RELATED - Patient alleges that medical condition is due to environment/events resulting from employment.
    """

    C_03 = "03"
    """
    PATIENT COVERED BY INSURANCE NOT REFLECTED HERE - Indicates that patient/patient representative has stated that coverage may exist beyond that reflected on this bill.
    """

    C_04 = "04"
    """
    INFORMATION ONLY BILL - Indicates submission of bill is for informational purposes only. Examples would include a bill submitted as a utilization report, or a bill for a beneficiary who enrolled in a risk-based managed care plan and the hospital expects to receive payment from the plan.
    """

    C_05 = "05"
    """
    LIEN HAS BEEN FILED - Provider has filed legal claim for recovery of funds potentially due a patient resulting from legal action initiated by or on behalf of the patient.
    """

    C_06 = "06"
    """
    ESRD PATIENT IN FIRST 30 MONTHS OF ENTITLEMENT COVERED BY EMPLOYER GROUP HEALTH INSURANCE - Code indicates Medicare as the secondary insurer because the patient also is covered through an employer group health insurance during his first 30 months of End Stage Renal Disease (ESRD) entitlement.
    """

    C_07 = "07"
    """
    TREATMENT OF NON-TERMINAL CONDITION FOR HOSPICE PATIENT - Code indicates the patient is a hospice enrollee, but the provider is not treating his terminal condition and is therefore, requesting regular Medicare reimbursement.
    """

    C_08 = "08"
    """
    BENEFICIARY WOULD NOT PROVIDE INFORMATION CONCERNING OTHER INSURANCE COVERAGE - Enter this code if the beneficiary would not provide information concerning other insurance coverage.
    """

    C_09 = "09"
    """
    NEITHER PATIENT NOR SPOUSE IS EMPLOYED - Indicates that in response to development questions, the patient and spouse (if the patient is married) have denied any employment.
    """

    C_10 = "10"
    """
    PATIENT AND/OR SPOUSE IS EMPLOYED BUT NO EGHP EXISTS - Code indicates that in response to development questions, the patient and/or spouse have indicated that one is or both are employed but have no group health insurance from an EGHP or other employer sponsored or provided health insurance that covers the patient.
    """

    C_11 = "11"
    """
    DISABLED BENEFICIARY BUT NO LGHP - Code indicates that in response to development questions, the disabled beneficiary and/or family members have indicated that one is or more are employed but have no group health insurance from an LGHP or other employer sponsored or provided health insurance that covers the patient.
    """

    C_17 = "17"
    """
    PATIENT IS HOMELESS - The patient is homeless.
    """

    C_18 = "18"
    """
    MAIDEN NAME RETAINED - A dependent spouse entitled to benefits who does not use her husband's last name.
    """

    C_19 = "19"
    """
    CHILD RETAINS MOTHER'S NAME - A patient who is a dependent child entitled to benefits and does not have its father's last name.
    """

    C_20 = "20"
    """
    BENEFICIARY REQUESTED BILLING - Provider realizes services are non-covered level of care or excluded, but beneficiary requests determination by payer. (Currently limited to home health and inpatient SNF claims.)
    """

    C_21 = "21"
    """
    BILLING FOR DENIAL NOTICE - Provider realizes services are non-covered level of care or excluded, but requests notice from Medicare or other payer.
    """

    C_22 = "22"
    """
    PATIENT ON MULTIPLE DRUG REGIMEN - A patient who is receiving multiple intravenous drugs while on home IV therapy.
    """

    C_23 = "23"
    """
    HOME CARE GIVER AVAILABLE - The patient has a caregiver available to assist him or her during self-administration of an intravenous drug.
    """

    C_24 = "24"
    """
    HOME IV PATIENT ALSO RECEIVING HHA SERVICES - The patient is under the care of Home Health Agency while receiving home IV drug therapy services.
    """

    C_25 = "25"
    """
    PATIENT IS NON-U.S. RESIDENT - The patient is not a resident of the United States.
    """

    C_26 = "26"
    """
    VA ELIGIBLE PATIENT CHOOSES TO RECEIVE SERVICES IN A MEDICARE CERTIFIED FACILITY - Indicates that the patient is a VA eligible patient and chooses to receive services in a Medicare certified provider instead of a VA facility.
    """

    C_28 = "28"
    """
    DATE COMPREHENSIVE OUTPATIENT REHABILITATION PLAN ESTABLISHED OR LAST REVIEWED - Code indicating the date a comprehensive outpatient rehabilitation plan was established or last reviewed.
    """

    C_29 = "29"
    """
    DATE OUTPATIENT PHYSICAL THERAPY PLAN ESTABLISHED OR LAST REVIEWED - Code indicating the date a physical therapy plan established or last reviewed.
    """

    C_30 = "30"
    """
    DATE OUTPATIENT SPEECH PATHOLOGY PLAN ESTABLISHED OR LAST REVIEWED - Code indicating the date a speech pathology plan was established or last reviewed.
    """

    C_31 = "31"
    """
    DATE BENEFICIARY NOTIFIED OF INTENT TO BILL (ACCOMMODATIONS) - The date of notice provided by the hospital to the patient that inpatient care is no longer required.
    """

    C_32 = "32"
    """
    DATE BENEFICIARY NOTIFIED OF INTENT TO BILL (PROCEDURES OR TREATMENTS) - The date of notice provided to the beneficiary that requested care (diagnostic procedures or treatments) may not be reasonable or necessary.
    """

    C_33 = "33"
    """
    FIRST DAY OF THE COORDINATION PERIOD FOR ESRD BENEFICIARIES COVERED BY EGHP - Code indicates the first day of coordination for benefits that are secondary to benefits payable under an employerâ€™s group health plan. Required only for ESRD beneficiaries.
    """

    C_34 = "34"
    """
    DATE OF ELECTION OF EXTENDED CARE FACILITIES - Code indicates the date the guest elected to receive extended care services (used by Religious Non-Medical only).
    """

    C_35 = "35"
    """
    DATE TREATMENT STARTED FOR PHYSICAL THERAPY - Code indicates the initial date services by the billing provider for physical therapy began.
    """

    C_36 = "36"
    """
    DATE OF INPATIENT HOSPITAL DISCHARGE FOR COVERED TRANSPLANT PATIENT - Code indicates the date of discharge for inpatient hospital stay in which the patient received a covered transplant procedure when the hospital is billing for immunosuppressive drugs. Note: When the patient received both a covered and a non-covered transplant, the covered transplant predominates.
    """

    C_37 = "37"
    """
    DATE OF INPATIENT HOSPITAL DISCHARGE FOR NON-COVERED TRANSPLANT PATIENT - Code indicates the date of discharge for the inpatient hospital stay in which the patient received a non-covered transplant procedure when the hospital is billing for immunosuppressive drugs.
    """

    C_38 = "38"
    """
    DATE TREATMENT STARTED FOR HOME IV THERAPY - Date the patient was first treated at home for IV therapy. (Home IV providers - Bill Type 085x.)
    """

    C_39 = "39"
    """
    DATE DISCHARGED ON A CONTINUOUS COURSE OF IV THERAPY - Date the patient was discharged from the hospital on continuous course of IV therapy. (Home IV providers - Bill Type 085x.)
    """

    C_40 = "40"
    """
    SCHEDULED DATE OF ADMISSION - The scheduled date the patient will be admitted as an inpatient to the hospital. (This code may only be used on an outpatient claim.)
    """

    C_41 = "41"
    """
    DATE OF FIRST TEST PRE-ADMISSION TESTING - The date on which the first outpatient diagnostic test was performed as part of a PAT program. This code may only be used if a date of admission was scheduled before the administration of the test(s).
    """

    C_42 = "42"
    """
    DATE OF DISCHARGE - Use only when "Through" date in Form Locator 06 (Statement Covers Period) is not the actual discharge date and the frequency code in Form Locator 04 is that of a final bill. For final bill for hospice care, enter the date the Medicare beneficiary terminated his election of hospice care.
    """

    C_43 = "43"
    """
    SCHEDULED DATE OF CANCELED SURGERY - The date for which outpatient surgery was scheduled.
    """

    C_44 = "44"
    """
    DATE TREATMENT STARTED OCCUPATIONAL THERAPY - The date services were initiated by the billing provider for occupational therapy.
    """

    C_45 = "45"
    """
    DATE TREATMENT STARTED FOR SPEECH THERAPY - The date services were initiated by the billing provider for speech therapy.
    """

    C_46 = "46"
    """
    DATE TREATMENT STARTED FOR CARDIAC REHABILITATION - The date services were initiated by the billing provider for cardiac rehabilitation.
    """

    C_47 = "47"
    """
    DATE COST OUTLIER STATUS BEGINS - Code indicates that this is the first day after the day the Cost Outlier threshold is reached. For Medicare purposes, a beneficiary must have regular, coinsurance and/or lifetime reserve days available beginning on this date to allow coverage of additional daily charges for the purpose of making a cost outlier payment.
    """

    C_50 = "50"
    """
    ASSESSMENT DATE (EFFECTIVE 1/1/11) - Code indicating an assessment date as defined by the assessment instrument applicable to this provider type (e.g., Minimum Data Set (MDS) for skilled nursing).
    """

    C_51 = "51"
    """
    DATE OF LAST KT/V READING (EFFECTIVE 7/1/10) - For in-center hemodialysis patients, this is the date of the last reading taken during the billing period. For peritoneal dialysis patients (and home hemodialysis patients), this date may be before the current billing period but should be within 4 months of the date of service.
    """

    C_52 = "52"
    """
    MEDICAL CERTIFICATION/RECERTIFICATION DATE (EFFECTIVE 1/1/11) - The date of the most recent non-hospice medical certification or recertification of the patient. Use Occurrence Code 27 for Date of Hospice Certification or Recertification.
    """

    C_54 = "54"
    """
    PHYSICIAN FOLLOW-UP DATE (EFFECTIVE 1/1/11) - Last date of a physician follow-up with the patient.
    """

    C_55 = "55"
    """
    DATE OF DEATH (EFFECTIVE 10/1/12) - Report this code when patient discharge status codes 20 (expired), 40 (expired at home), 41 (expired in a medical facility), or 42 (expired - place unknown) are used.
    """

    C_56 = "56"
    """
    ORIGINAL HOSPICE ELECTION OR REVOCATION DATE (EFFECTIVE 1/1/18) - Used when the hospice is submitting a correction to the election date reported on a previous 08xA Type of Bill or the revocation date on a previous 08xB Type of Bill. The hospice reports the correct dates in FL06 - Statement Covers Period (From-Through) and the original date in this occurrence code.
    """

    C_61 = "61"
    """
    HOSPITAL DISCHARGE DATE (HHA ONLY) (EFFECTIVE 1/1/2020) - The Through date of a hospital stay that ended within 14 days prior to the From date of this HHA claim.
    """

    C_62 = "62"
    """
    OTHER INSTITUTIONAL DISCHARGE DATE (HHA ONLY) (EFFECTIVE 1/1/2020) - The Through date of a skilled nursing facility (SNF), inpatient rehabilitation facility (IRF), long term care hospital (LTCH), or inpatient psychiatric facility (IPF) stay that ended within 14 days prior to this HHA admission.
    """

    CA_1 = "A1"
    """
    BIRTH DATE - INSURED A - The birth date of the individual in whose name the insurance is carried.
    """

    CA_2 = "A2"
    """
    EFFECTIVE DATE - INSURED A POLICY - A code indicating the first date insurance is in force.
    """

    CA_3 = "A3"
    """
    BENEFITS EXHAUSTED - PAYER A - Code indicating the last date for which benefits are available and after which no payment can be made by Payer A.
    """

    CA_4 = "A4"
    """
    SPLIT BILL DATE - Date patient became eligible due to medically needy spend down (sometimes referred to as "Split Bill Date").
    """

    CB_1 = "B1"
    """
    BIRTH DATE INSURED B - The birth date of the individual in whose name the insurance is carried.
    """

    CB_2 = "B2"
    """
    EFFECTIVE DATE - INSURED B POLICY - A code indicating the first date insurance is in force.
    """

    CB_3 = "B3"
    """
    BENEFITS EXHAUSTED - PAYER B - Code indicating the last date for which benefits are available and after which no payment can be made by Payer B.
    """

    CC_1 = "C1"
    """
    BIRTH DATE INSURED C - The birth date of the individual in whose name the insurance is carried.
    """

    CC_2 = "C2"
    """
    EFFECTIVE DATE - INSURED C POLICY - A code indicating the first date insurance is in force.
    """

    CC_3 = "C3"
    """
    BENEFITS EXHAUSTED - PAYER C - Code indicating the last date for which benefits are available and after which no payment can be made by Payer C.
    """

    _UNKNOWN = "__CONDITIONCODE_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "ConditionCode":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        c_01: typing.Callable[[], T_Result],
        c_02: typing.Callable[[], T_Result],
        c_03: typing.Callable[[], T_Result],
        c_04: typing.Callable[[], T_Result],
        c_05: typing.Callable[[], T_Result],
        c_06: typing.Callable[[], T_Result],
        c_07: typing.Callable[[], T_Result],
        c_08: typing.Callable[[], T_Result],
        c_09: typing.Callable[[], T_Result],
        c_10: typing.Callable[[], T_Result],
        c_11: typing.Callable[[], T_Result],
        c_17: typing.Callable[[], T_Result],
        c_18: typing.Callable[[], T_Result],
        c_19: typing.Callable[[], T_Result],
        c_20: typing.Callable[[], T_Result],
        c_21: typing.Callable[[], T_Result],
        c_22: typing.Callable[[], T_Result],
        c_23: typing.Callable[[], T_Result],
        c_24: typing.Callable[[], T_Result],
        c_25: typing.Callable[[], T_Result],
        c_26: typing.Callable[[], T_Result],
        c_28: typing.Callable[[], T_Result],
        c_29: typing.Callable[[], T_Result],
        c_30: typing.Callable[[], T_Result],
        c_31: typing.Callable[[], T_Result],
        c_32: typing.Callable[[], T_Result],
        c_33: typing.Callable[[], T_Result],
        c_34: typing.Callable[[], T_Result],
        c_35: typing.Callable[[], T_Result],
        c_36: typing.Callable[[], T_Result],
        c_37: typing.Callable[[], T_Result],
        c_38: typing.Callable[[], T_Result],
        c_39: typing.Callable[[], T_Result],
        c_40: typing.Callable[[], T_Result],
        c_41: typing.Callable[[], T_Result],
        c_42: typing.Callable[[], T_Result],
        c_43: typing.Callable[[], T_Result],
        c_44: typing.Callable[[], T_Result],
        c_45: typing.Callable[[], T_Result],
        c_46: typing.Callable[[], T_Result],
        c_47: typing.Callable[[], T_Result],
        c_50: typing.Callable[[], T_Result],
        c_51: typing.Callable[[], T_Result],
        c_52: typing.Callable[[], T_Result],
        c_54: typing.Callable[[], T_Result],
        c_55: typing.Callable[[], T_Result],
        c_56: typing.Callable[[], T_Result],
        c_61: typing.Callable[[], T_Result],
        c_62: typing.Callable[[], T_Result],
        ca_1: typing.Callable[[], T_Result],
        ca_2: typing.Callable[[], T_Result],
        ca_3: typing.Callable[[], T_Result],
        ca_4: typing.Callable[[], T_Result],
        cb_1: typing.Callable[[], T_Result],
        cb_2: typing.Callable[[], T_Result],
        cb_3: typing.Callable[[], T_Result],
        cc_1: typing.Callable[[], T_Result],
        cc_2: typing.Callable[[], T_Result],
        cc_3: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is ConditionCode.C_01:
            return c_01()
        if self is ConditionCode.C_02:
            return c_02()
        if self is ConditionCode.C_03:
            return c_03()
        if self is ConditionCode.C_04:
            return c_04()
        if self is ConditionCode.C_05:
            return c_05()
        if self is ConditionCode.C_06:
            return c_06()
        if self is ConditionCode.C_07:
            return c_07()
        if self is ConditionCode.C_08:
            return c_08()
        if self is ConditionCode.C_09:
            return c_09()
        if self is ConditionCode.C_10:
            return c_10()
        if self is ConditionCode.C_11:
            return c_11()
        if self is ConditionCode.C_17:
            return c_17()
        if self is ConditionCode.C_18:
            return c_18()
        if self is ConditionCode.C_19:
            return c_19()
        if self is ConditionCode.C_20:
            return c_20()
        if self is ConditionCode.C_21:
            return c_21()
        if self is ConditionCode.C_22:
            return c_22()
        if self is ConditionCode.C_23:
            return c_23()
        if self is ConditionCode.C_24:
            return c_24()
        if self is ConditionCode.C_25:
            return c_25()
        if self is ConditionCode.C_26:
            return c_26()
        if self is ConditionCode.C_28:
            return c_28()
        if self is ConditionCode.C_29:
            return c_29()
        if self is ConditionCode.C_30:
            return c_30()
        if self is ConditionCode.C_31:
            return c_31()
        if self is ConditionCode.C_32:
            return c_32()
        if self is ConditionCode.C_33:
            return c_33()
        if self is ConditionCode.C_34:
            return c_34()
        if self is ConditionCode.C_35:
            return c_35()
        if self is ConditionCode.C_36:
            return c_36()
        if self is ConditionCode.C_37:
            return c_37()
        if self is ConditionCode.C_38:
            return c_38()
        if self is ConditionCode.C_39:
            return c_39()
        if self is ConditionCode.C_40:
            return c_40()
        if self is ConditionCode.C_41:
            return c_41()
        if self is ConditionCode.C_42:
            return c_42()
        if self is ConditionCode.C_43:
            return c_43()
        if self is ConditionCode.C_44:
            return c_44()
        if self is ConditionCode.C_45:
            return c_45()
        if self is ConditionCode.C_46:
            return c_46()
        if self is ConditionCode.C_47:
            return c_47()
        if self is ConditionCode.C_50:
            return c_50()
        if self is ConditionCode.C_51:
            return c_51()
        if self is ConditionCode.C_52:
            return c_52()
        if self is ConditionCode.C_54:
            return c_54()
        if self is ConditionCode.C_55:
            return c_55()
        if self is ConditionCode.C_56:
            return c_56()
        if self is ConditionCode.C_61:
            return c_61()
        if self is ConditionCode.C_62:
            return c_62()
        if self is ConditionCode.CA_1:
            return ca_1()
        if self is ConditionCode.CA_2:
            return ca_2()
        if self is ConditionCode.CA_3:
            return ca_3()
        if self is ConditionCode.CA_4:
            return ca_4()
        if self is ConditionCode.CB_1:
            return cb_1()
        if self is ConditionCode.CB_2:
            return cb_2()
        if self is ConditionCode.CB_3:
            return cb_3()
        if self is ConditionCode.CC_1:
            return cc_1()
        if self is ConditionCode.CC_2:
            return cc_2()
        if self is ConditionCode.CC_3:
            return cc_3()
        return _unknown_member(self._value_)
