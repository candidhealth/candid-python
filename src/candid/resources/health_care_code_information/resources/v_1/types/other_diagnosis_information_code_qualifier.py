# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class OtherDiagnosisInformationCodeQualifier(str, enum.Enum):
    CBF = "BF"
    """
    International Classification of Diseases Clinical Modification (ICD-9-CM) Diagnosis
    """

    CABF = "ABF"
    """
    International Classification of Diseases Clinical Modification (ICD-10-CM) Diagnosis
    """

    _UNKNOWN = "__OTHERDIAGNOSISINFORMATIONCODEQUALIFIER_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "OtherDiagnosisInformationCodeQualifier":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        cbf: typing.Callable[[], T_Result],
        cabf: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is OtherDiagnosisInformationCodeQualifier.CBF:
            return cbf()
        if self is OtherDiagnosisInformationCodeQualifier.CABF:
            return cabf()
        return _unknown_member(self._value_)
