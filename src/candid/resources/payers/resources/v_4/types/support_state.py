# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class SupportState(str, enum.Enum):
    NOT_SUPPORTED = "NOT_SUPPORTED"
    SUPPORTED_ENROLLMENT_NOT_REQUIRED = "SUPPORTED_ENROLLMENT_NOT_REQUIRED"
    SUPPORTED_ENROLLMENT_REQUIRED = "SUPPORTED_ENROLLMENT_REQUIRED"
    _UNKNOWN = "__SUPPORTSTATE_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "SupportState":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        not_supported: typing.Callable[[], T_Result],
        supported_enrollment_not_required: typing.Callable[[], T_Result],
        supported_enrollment_required: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is SupportState.NOT_SUPPORTED:
            return not_supported()
        if self is SupportState.SUPPORTED_ENROLLMENT_NOT_REQUIRED:
            return supported_enrollment_not_required()
        if self is SupportState.SUPPORTED_ENROLLMENT_REQUIRED:
            return supported_enrollment_required()
        return _unknown_member(self._value_)
