# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .payer_ids import PayerIds
from .support_state import SupportState


class ClearinghousePayerInfo(UniversalBaseModel):
    payer_name: str = pydantic.Field()
    """
    The clearinghouse display name of the payer.
    """

    professional_payer_ids: PayerIds = pydantic.Field()
    """
    Payer IDs for professional claims
    """

    institutional_payer_ids: PayerIds = pydantic.Field()
    """
    Payer IDs for institutional claims
    """

    professional_claims_support: SupportState = pydantic.Field()
    """
    The support state for claims submission
    """

    institutional_claims_support: SupportState = pydantic.Field()
    """
    The support state for institutional claims submission
    """

    eligibility_support: SupportState = pydantic.Field()
    """
    The support state for eligibility
    """

    remittance_support: SupportState = pydantic.Field()
    """
    The support state for remittance
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
