# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import pydantic
import typing_extensions

from ....core.datetime_utils import serialize_datetime
from ....core.pydantic_utilities import deep_union_pydantic_dicts
from .date_range_optional_end import DateRangeOptionalEnd

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def date_range(self, value: DateRangeOptionalEnd) -> RemovableDateRangeOptionalEnd:
        return RemovableDateRangeOptionalEnd(
            __root__=_RemovableDateRangeOptionalEnd.DateRange(**value.dict(exclude_unset=True), type="date_range")
        )

    def remove(self) -> RemovableDateRangeOptionalEnd:
        return RemovableDateRangeOptionalEnd(__root__=_RemovableDateRangeOptionalEnd.Remove(type="remove"))


class RemovableDateRangeOptionalEnd(pydantic.BaseModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    def get_as_union(
        self,
    ) -> typing.Union[_RemovableDateRangeOptionalEnd.DateRange, _RemovableDateRangeOptionalEnd.Remove]:
        return self.__root__

    def visit(
        self, date_range: typing.Callable[[DateRangeOptionalEnd], T_Result], remove: typing.Callable[[], T_Result]
    ) -> T_Result:
        if self.__root__.type == "date_range":
            return date_range(DateRangeOptionalEnd(**self.__root__.dict(exclude_unset=True, exclude={"type"})))
        if self.__root__.type == "remove":
            return remove()

    __root__: typing_extensions.Annotated[
        typing.Union[_RemovableDateRangeOptionalEnd.DateRange, _RemovableDateRangeOptionalEnd.Remove],
        pydantic.Field(discriminator="type"),
    ]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}


class _RemovableDateRangeOptionalEnd:
    class DateRange(DateRangeOptionalEnd):
        type: typing.Literal["date_range"] = "date_range"

        class Config:
            frozen = True
            smart_union = True
            allow_population_by_field_name = True
            populate_by_name = True

    class Remove(pydantic.BaseModel):
        type: typing.Literal["remove"] = "remove"

        class Config:
            frozen = True
            smart_union = True


RemovableDateRangeOptionalEnd.update_forward_refs()
