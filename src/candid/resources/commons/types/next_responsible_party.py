# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class NextResponsibleParty(str, enum.Enum):
    PRIMARY = "primary"
    SECONDARY = "secondary"
    TERTIARY = "tertiary"
    PATIENT = "patient"
    NON_INSURANCE = "non_insurance"
    NONE = "none"
    _UNKNOWN = "__NEXTRESPONSIBLEPARTY_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "NextResponsibleParty":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        primary: typing.Callable[[], T_Result],
        secondary: typing.Callable[[], T_Result],
        tertiary: typing.Callable[[], T_Result],
        patient: typing.Callable[[], T_Result],
        non_insurance: typing.Callable[[], T_Result],
        none: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is NextResponsibleParty.PRIMARY:
            return primary()
        if self is NextResponsibleParty.SECONDARY:
            return secondary()
        if self is NextResponsibleParty.TERTIARY:
            return tertiary()
        if self is NextResponsibleParty.PATIENT:
            return patient()
        if self is NextResponsibleParty.NON_INSURANCE:
            return non_insurance()
        if self is NextResponsibleParty.NONE:
            return none()
        return _unknown_member(self._value_)
