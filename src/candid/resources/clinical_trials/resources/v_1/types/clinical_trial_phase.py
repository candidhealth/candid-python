# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class ClinicalTrialPhase(str, enum.Enum):
    PHASE_ONE = "Phase 1"
    PHASE_TWO = "Phase 2"
    PHASE_THREE = "Phase 3"
    _UNKNOWN = "__CLINICALTRIALPHASE_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "ClinicalTrialPhase":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        phase_one: typing.Callable[[], T_Result],
        phase_two: typing.Callable[[], T_Result],
        phase_three: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is ClinicalTrialPhase.PHASE_ONE:
            return phase_one()
        if self is ClinicalTrialPhase.PHASE_TWO:
            return phase_two()
        if self is ClinicalTrialPhase.PHASE_THREE:
            return phase_three()
        return _unknown_member(self._value_)
