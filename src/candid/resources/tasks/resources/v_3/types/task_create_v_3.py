# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ......core.datetime_utils import serialize_datetime
from ......core.pydantic_utilities import deep_union_pydantic_dicts
from .....commons.types.encounter_id import EncounterId
from .....commons.types.user_id import UserId
from .....commons.types.work_queue_id import WorkQueueId
from ...commons.types.task_category import TaskCategory
from ...commons.types.task_type import TaskType


class TaskCreateV3(pydantic.BaseModel):
    encounter_id: EncounterId
    task_type: TaskType
    description: str
    blocks_claim_submission: typing.Optional[bool] = None
    assignee_user_id: typing.Optional[UserId] = None
    category: typing.Optional[TaskCategory] = None
    work_queue_id: WorkQueueId

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}
