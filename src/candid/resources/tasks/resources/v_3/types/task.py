# This file was auto-generated by Fern from our API Definition.

from ......core.pydantic_utilities import UniversalBaseModel
from .....commons.types.task_id import TaskId
from .....commons.types.encounter_id import EncounterId
from ...commons.types.task_type import TaskType
import typing
from ...commons.types.task_status import TaskStatus
from .task_note import TaskNote
import datetime as dt
import pydantic
from .task_assignment import TaskAssignment
from ...commons.types.task_category import TaskCategory
from ......core.pydantic_utilities import IS_PYDANTIC_V2


class Task(UniversalBaseModel):
    task_id: TaskId
    encounter_id: EncounterId
    task_type: TaskType
    description: str
    blocks_claim_submission: bool
    external_id: str
    patient_name: str
    patient_external_id: str
    payer_name: typing.Optional[str] = None
    payer_id: typing.Optional[str] = None
    status: TaskStatus
    notes: typing.List[TaskNote]
    created_at: dt.datetime
    updated_at: dt.datetime = pydantic.Field()
    """
    The time of most recent update to the task only
    """

    agg_updated_at: dt.datetime = pydantic.Field()
    """
    The time of most recent update to the task or any of its notes
    """

    date_of_service: dt.date
    assignments: typing.List[TaskAssignment]
    category: typing.Optional[TaskCategory] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
