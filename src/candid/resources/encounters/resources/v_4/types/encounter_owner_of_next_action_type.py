# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class EncounterOwnerOfNextActionType(str, enum.Enum):
    CANDID = "CANDID"
    CUSTOMER = "CUSTOMER"
    CODER = "CODER"
    NONE = "NONE"
    _UNKNOWN = "__ENCOUNTEROWNEROFNEXTACTIONTYPE_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "EncounterOwnerOfNextActionType":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        candid: typing.Callable[[], T_Result],
        customer: typing.Callable[[], T_Result],
        coder: typing.Callable[[], T_Result],
        none: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is EncounterOwnerOfNextActionType.CANDID:
            return candid()
        if self is EncounterOwnerOfNextActionType.CUSTOMER:
            return customer()
        if self is EncounterOwnerOfNextActionType.CODER:
            return coder()
        if self is EncounterOwnerOfNextActionType.NONE:
            return none()
        return _unknown_member(self._value_)
