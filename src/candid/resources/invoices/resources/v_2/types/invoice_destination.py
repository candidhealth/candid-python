# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class InvoiceDestination(str, enum.Enum):
    STRIPE = "STRIPE"
    CEDAR = "CEDAR"
    HEALTHIE = "HEALTHIE"
    COLLECTLY = "COLLECTLY"
    THIRD_PARTY_PAYERS = "THIRD_PARTY_PAYERS"
    _UNKNOWN = "__INVOICEDESTINATION_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "InvoiceDestination":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        stripe: typing.Callable[[], T_Result],
        cedar: typing.Callable[[], T_Result],
        healthie: typing.Callable[[], T_Result],
        collectly: typing.Callable[[], T_Result],
        third_party_payers: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is InvoiceDestination.STRIPE:
            return stripe()
        if self is InvoiceDestination.CEDAR:
            return cedar()
        if self is InvoiceDestination.HEALTHIE:
            return healthie()
        if self is InvoiceDestination.COLLECTLY:
            return collectly()
        if self is InvoiceDestination.THIRD_PARTY_PAYERS:
            return third_party_payers()
        return _unknown_member(self._value_)
