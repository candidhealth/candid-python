# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class YesNoIndicator(str, enum.Enum):
    YES = "YES"
    NO = "NO"
    UNKNOWN = "UNKNOWN"
    NOT_APPLICABLE = "NOT_APPLICABLE"
    _UNKNOWN = "__YESNOINDICATOR_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "YesNoIndicator":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        yes: typing.Callable[[], T_Result],
        no: typing.Callable[[], T_Result],
        unknown: typing.Callable[[], T_Result],
        not_applicable: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is YesNoIndicator.YES:
            return yes()
        if self is YesNoIndicator.NO:
            return no()
        if self is YesNoIndicator.UNKNOWN:
            return unknown()
        if self is YesNoIndicator.NOT_APPLICABLE:
            return not_applicable()
        return _unknown_member(self._value_)
