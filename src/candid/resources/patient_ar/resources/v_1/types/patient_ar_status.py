# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class PatientArStatus(str, enum.Enum):
    INVOICEABLE = "invoiceable"
    NON_INVOICEABLE = "non_invoiceable"
    _UNKNOWN = "__PATIENTARSTATUS_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "PatientArStatus":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        invoiceable: typing.Callable[[], T_Result],
        non_invoiceable: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is PatientArStatus.INVOICEABLE:
            return invoiceable()
        if self is PatientArStatus.NON_INVOICEABLE:
            return non_invoiceable()
        return _unknown_member(self._value_)
